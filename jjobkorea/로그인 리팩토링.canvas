{
	"nodes":[
		{"id":"93a0ec3170701e20","type":"text","text":"```java\n@Controller  \n@Slf4j  \npublic class MemController {  \n    @Autowired  \n    private MemService service;  \n    @Autowired  \n    private MemSignupService signupService;  \n  \n    @RequestMapping(\"/login\")  \n    public String login(Model model) {  \n        log.info(\"@# login\");  \n  \n        String page = \"MemLogin/login\";  \n        model.addAttribute(\"page\", page);  \n  \n        return \"main/main\";  \n    }  \n  \n    @PostMapping(\"/login_yn\")  \n    public String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {  \n        log.info(\"@# login_yn\");  \n        String loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)  \n        ArrayList<MemDTO> user = service.loginYn(param);  \n  \n        if (user.isEmpty()) {  \n            log.info(\"사용자를 찾을 수 없습니다.\");  \n            return \"redirect:login?error=true\";  \n        }  \n  \n        MemDTO foundUser = user.get(0);  \n  \n        // 사용자 유형이 일치하는지 확인  \n        if ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {  \n            log.info(\"로그인 유형이 일치하지 않습니다.\");  \n            return \"redirect:login?error=true\";  \n        }  \n  \n        // 입력된 비밀번호가 데이터베이스에 저장된 비밀번호와 일치하는지 확인  \n        if (!foundUser.getMemPwd().equals(param.get(\"memPwd\"))) {  \n            log.info(\"비밀번호가 일치하지 않습니다.\");  \n            return \"redirect:login?error=true\";  \n        }  \n  \n        // 세션에 사용자 정보 저장  \n        HttpSession session = request.getSession();  \n        session.setAttribute(\"user\", foundUser);  \n        log.info(\"사용자 세션 저장 완료: \" + foundUser.getMemId());  \n        return \"redirect:main\";  \n    }  \n  \n    @RequestMapping(\"/main\")  \n    public String main(HttpSession session, Model model) {  \n        log.info(\"@# main\");  \n        MemDTO user = (MemDTO) session.getAttribute(\"user\");  \n        if (user != null) {  \n            model.addAttribute(\"memName\", user.getMemName());  \n        }  \n        return \"main/main\";  \n    }  \n  \n    @RequestMapping(\"/login_ok\")  \n    public String login_ok(HttpSession session, Model model) {  \n        log.info(\"@# login_ok\");  \n        MemDTO user = (MemDTO) session.getAttribute(\"user\");  \n        if (user != null) {  \n            model.addAttribute(\"memName\", user.getMemName());  \n        }  \n        return \"login_ok\";  \n    }  \n  \n    @PostMapping(\"/checkId\")  \n    @ResponseBody  \n    public Map<String, Boolean> checkId(@RequestParam(\"memId\") String memId) {  \n        Map<String, Boolean> response = new HashMap<>();  \n        response.put(\"exists\", signupService.isMemIdExists(memId));  \n        return response;  \n    }\n```","x":-413,"y":-22,"width":1133,"height":1742},
		{"id":"9f7257090187996a","type":"text","text":"# 컨트롤러 리팩토링 전 로그인 로직","x":-413,"y":-101,"width":613,"height":79},
		{"id":"0fb1231381f7a7dd","type":"text","text":"### 기능 \n- 사용자 아이디 & 비번 체크 후 로그인\n- 세션 저장","x":200,"y":-180,"width":480,"height":158},
		{"id":"2e26c6f890585e74","type":"text","text":"```java\n\n@Controller  \npublic class UserController {  \n  \n    private static final Logger log = LoggerFactory.getLogger(UserController.class);  \n    public final UserService userService;  \n  \n    public UserController(UserService userService) {  \n        this.userService = userService;  \n    }  \n  \n    //로그인 페이지 로드  \n    @GetMapping(\"/login\")  \n    public String showLoginPage() {  \n  \n        return \"user/login\";  \n    }  \n  \n    //로그인  \n    @PostMapping(\"/login\")  \n    public String login(UserDTO userDTO, Model model) {  \n  \n        //프론트에서 넘어올 userDTO가 null인 가능성이 있어서 Optional 사용  \n        Optional<UserDTO> optionalUser = Optional.ofNullable(userDTO);  \n\n\t\t//null이 아닐 경우 해당 로직 실행\n        if(optionalUser.isPresent()) {   \n            boolean isAuthenticated = userService.login(userDTO);  \n            if (isAuthenticated) {  \n                model.addAttribute(\"page\",showLoginPage());  \n                return \"main/main\";  \n            } else {  \n                return \"redirect:/\";  \n            }  \n        }else {//null일 경우 다시 로그인 페이지로 이동  \n            model.addAttribute(\"page\",showLoginPage());  \n            return \"main/main\";  \n        }  \n    }  \n}\n```","x":1720,"y":358,"width":1093,"height":982},
		{"id":"b223714c2e742f5a","type":"text","text":"# 컨트롤러 리팩토링 후 로그인 로직","x":1720,"y":279,"width":613,"height":79},
		{"id":"6a4239980ed3e5cc","type":"text","text":"### 기능 \n- 사용자 아이디 & 비번 체크 후 로그인\n- 세션 저장 (아직 미구현)","x":2333,"y":200,"width":480,"height":158},
		{"id":"b03544b76b3cc6f1","type":"text","text":"```JAVA\n  \n@Slf4j  \n@Service  \npublic class MemServiceImpl implements MemService {  \n  \n    @Autowired  \n    private JdbcTemplate jdbcTemplate;  \n  \n    private RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> {  \n        MemDTO mem = new MemDTO();  \n        mem.setMemId(rs.getString(\"memId\"));  \n        mem.setMemPwd(rs.getString(\"memPwd\"));  \n        mem.setMemName(rs.getString(\"memName\"));  \n        mem.setCpId(rs.getInt(\"cpId\"));  \n        mem.setCompanyType(rs.getString(\"companyType\"));  \n        mem.setCompanyRegistrationNum(rs.getString(\"companyRegistrationNum\"));  \n        mem.setCompanyRepresentativeName(rs.getString(\"companyRepresentativeName\"));  \n        mem.setCompanyName(rs.getString(\"companyName\"));  \n        mem.setCompanyAddr(rs.getString(\"companyAddr\"));  \n        mem.companyBusinessRegistration(rs.getString(\"companyBusinessRegistration\")); // 이 필드 사용  \n        mem.setUserType(rs.getInt(\"userType\"));  \n        return mem;  \n    };  \n  \n    @Override  \n    public ArrayList<MemDTO> loginYn(HashMap<String, String> param) {  \n        log.info(\"@# MemServiceImpl loginYn\");  \n  \n        String sql = \"SELECT tb.memId, tb.memPwd, tb.memName, tb.cpId, cp.companyType, cp.companyRegistrationNum, cp.companyRepresentativeName, cp.companyName, cp.companyAddr, cp.companyBusinessRegistration AS companyBusinessRegistration, tb.userType FROM signup_tb tb LEFT JOIN signup_cp cp ON tb.cpId = cp.id WHERE tb.memId = ?\";  \n        List<MemDTO> result = jdbcTemplate.query(sql, memRowMapper, param.get(\"memId\"));  \n  \n        return new ArrayList<>(result);  \n    }  \n  \n    @Override  \n    public void write(HashMap<String, String> param) {  \n        log.info(\"@# MemServiceImpl write\");  \n        log.info(\"Parameters in service: \" + param);  \n  \n        if (param.get(\"companyType\") != null && !param.get(\"companyType\").isEmpty()) {  \n            String cpSql = \"INSERT INTO signup_cp (companyType, companyRegistrationNum, companyName, companyRepresentativeName, companyAddr, companyBusinessRegistration) VALUES (?, ?, ?, ?, ?, ?)\";  \n            jdbcTemplate.update(cpSql, param.get(\"companyType\"), param.get(\"companyRegistrationNum\"), param.get(\"companyName\"), param.get(\"companyRepresentativeName\"), param.get(\"companyAddr\"), param.get(\"companyBusinessRegistration\"));  \n  \n            Integer cpId = jdbcTemplate.queryForObject(\"SELECT LAST_INSERT_ID()\", Integer.class);  \n  \n            String memSql = \"INSERT INTO signup_tb (memId, memPwd, memName, memPhone, memAddr, memEmail, memCreationDate, cpId, userType) VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, 1)\";  \n            jdbcTemplate.update(memSql, param.get(\"memId\"), param.get(\"memPwd\"), param.get(\"memName\"), param.get(\"memPhone\"), param.get(\"memAddr\"), param.get(\"memEmail\"), cpId);  \n        } else {  \n            String memSql = \"INSERT INTO signup_tb (memId, memPwd, memName, memPhone, memAddr, memEmail, memBirth, memGender, memCreationDate, userType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, -1)\";  \n            jdbcTemplate.update(memSql, param.get(\"memId\"), param.get(\"memPwd\"), param.get(\"memName\"), param.get(\"memPhone\"), param.get(\"memAddr\"), param.get(\"memEmail\"), param.get(\"memBirth\"), param.get(\"memGender\"));  \n        }  \n    }  \n  \n    @Override  \n    public ArrayList<MemDTO> selectByCpId(HashMap<String, String> param) {  \n        log.info(\"@# MemServiceImpl selectByCpId\");  \n  \n        String sql = \"SELECT tb.cpId, cp.companyType, cp.companyRegistrationNum, cp.companyName, cp.companyRepresentativeName, cp.companyAddr, cp.companyBusinessRegistration FROM signup_tb tb LEFT JOIN signup_cp cp ON tb.cpId = cp.id WHERE tb.cpId = ?\";  \n        List<MemDTO> result = jdbcTemplate.query(sql, memRowMapper, param.get(\"cpId\"));  \n  \n        return new ArrayList<>(result);  \n    }  \n  \n    @Override  \n    public int checkCpRegistrationNum(String cpRegistrationNum) {  \n        log.info(\"@# MemServiceImpl checkCpRegistrationNum\");  \n  \n        String sql = \"SELECT COUNT(*) FROM signup_cp WHERE companyRegistrationNum = ?\";  \n        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, cpRegistrationNum);  \n        return count != null ? count : 0;  \n    }  \n}\n```","x":-413,"y":2800,"width":2511,"height":1760},
		{"id":"8b6a76c73fcde02a","type":"text","text":"# 서비스 리팩토링 전 로그인 로직\n- DTO, 매퍼XML 로직을 다 가지고 있음 ","x":-413,"y":2680,"width":613,"height":120},
		{"id":"72fc4c31abe15a2e","type":"text","text":"# 서비스 리팩토링 후 로그인 로직","x":3400,"y":3332,"width":613,"height":79},
		{"id":"1afd1f3acad22ccf","type":"text","text":"```JAVA\n  \n@Service  \npublic class UserServiceImpl implements UserService{  \n  \n    private static final Logger log = LoggerFactory.getLogger(UserController.class);  \n    private  final UserMapper userMapper;  \n  \n    public UserServiceImpl(UserMapper userMapper) {  \n        this.userMapper = userMapper;  \n    }  \n  \n    //로그인  \n    @Override  \n    public boolean login(UserDTO userDTO) {  \n  \n        log.info(\"넘어온 userDTO : {}\",userDTO);  \n  \n        //TODO:세션 로직 추가하기  \n  \n        return userMapper.login(userDTO).isEmpty();  \n    }  \n}\n```","x":3400,"y":3411,"width":952,"height":539},
		{"id":"9fda246e6ce4d9a0","x":3422,"y":4187,"width":778,"height":333,"type":"text","text":"```JAVA\npackage com.jjobkorea.mapper;  \n  \nimport com.jjobkorea.dto.UserDTO;  \nimport org.apache.ibatis.annotations.Mapper;  \n  \nimport java.util.Optional;  \n  \n@Mapper  \npublic interface UserMapper {  \n    //아이디, 비번이 일치하면 유저 정보 가져오기  \n    public Optional<UserDTO> login(UserDTO userDTO);  \n}\n```"},
		{"id":"dada02b8b788306e","x":3408,"y":4122,"width":250,"height":60,"type":"text","text":""}
	],
	"edges":[
		{"id":"a63c7b97af8e88be","fromNode":"93a0ec3170701e20","fromSide":"right","toNode":"2e26c6f890585e74","toSide":"left"},
		{"id":"d095bbf3267a9cb5","fromNode":"b03544b76b3cc6f1","fromSide":"right","toNode":"1afd1f3acad22ccf","toSide":"left"}
	]
}