{
	"nodes":[
		{"id":"93a0ec3170701e20","x":-413,"y":-22,"width":1133,"height":1742,"type":"text","text":"```java\n@Controller  \n@Slf4j  \npublic class MemController {  \n    @Autowired  \n    private MemService service;  \n    @Autowired  \n    private MemSignupService signupService;  \n  \n    @RequestMapping(\"/login\")  \n    public String login(Model model) {  \n        log.info(\"@# login\");  \n  \n        String page = \"MemLogin/login\";  \n        model.addAttribute(\"page\", page);  \n  \n        return \"main/main\";  \n    }  \n  \n    @PostMapping(\"/login_yn\")  \n    public String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {  \n        log.info(\"@# login_yn\");  \n        String loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)  \n        ArrayList<MemDTO> user = service.loginYn(param);  \n  \n        if (user.isEmpty()) {  \n            log.info(\"사용자를 찾을 수 없습니다.\");  \n            return \"redirect:login?error=true\";  \n        }  \n  \n        MemDTO foundUser = user.get(0);  \n  \n        // 사용자 유형이 일치하는지 확인  \n        if ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {  \n            log.info(\"로그인 유형이 일치하지 않습니다.\");  \n            return \"redirect:login?error=true\";  \n        }  \n  \n        // 입력된 비밀번호가 데이터베이스에 저장된 비밀번호와 일치하는지 확인  \n        if (!foundUser.getMemPwd().equals(param.get(\"memPwd\"))) {  \n            log.info(\"비밀번호가 일치하지 않습니다.\");  \n            return \"redirect:login?error=true\";  \n        }  \n  \n        // 세션에 사용자 정보 저장  \n        HttpSession session = request.getSession();  \n        session.setAttribute(\"user\", foundUser);  \n        log.info(\"사용자 세션 저장 완료: \" + foundUser.getMemId());  \n        return \"redirect:main\";  \n    }  \n  \n    @RequestMapping(\"/main\")  \n    public String main(HttpSession session, Model model) {  \n        log.info(\"@# main\");  \n        MemDTO user = (MemDTO) session.getAttribute(\"user\");  \n        if (user != null) {  \n            model.addAttribute(\"memName\", user.getMemName());  \n        }  \n        return \"main/main\";  \n    }  \n  \n    @RequestMapping(\"/login_ok\")  \n    public String login_ok(HttpSession session, Model model) {  \n        log.info(\"@# login_ok\");  \n        MemDTO user = (MemDTO) session.getAttribute(\"user\");  \n        if (user != null) {  \n            model.addAttribute(\"memName\", user.getMemName());  \n        }  \n        return \"login_ok\";  \n    }  \n  \n    @PostMapping(\"/checkId\")  \n    @ResponseBody  \n    public Map<String, Boolean> checkId(@RequestParam(\"memId\") String memId) {  \n        Map<String, Boolean> response = new HashMap<>();  \n        response.put(\"exists\", signupService.isMemIdExists(memId));  \n        return response;  \n    }\n```"},
		{"id":"9f7257090187996a","x":-413,"y":-101,"width":613,"height":79,"type":"text","text":"# 컨트롤러 리팩토링 전 로그인 로직"},
		{"id":"0fb1231381f7a7dd","x":200,"y":-180,"width":480,"height":158,"type":"text","text":"### 기능 \n- 사용자 아이디 & 비번 체크 후 로그인\n- 세션 저장"},
		{"id":"2e26c6f890585e74","x":1000,"y":-22,"width":1240,"height":982,"type":"text","text":"```java\n\n@Controller  \npublic class UserController {  \n  \n    private static final Logger log = LoggerFactory.getLogger(UserController.class);  \n    public final UserService userService;  \n  \n    public UserController(UserService userService) {  \n        this.userService = userService;  \n    }  \n  \n    //로그인 페이지 로드  \n    @GetMapping(\"/login\")  \n    public String showLoginPage() {  \n  \n        return \"user/login\";  \n    }  \n  \n    //로그인  \n    @PostMapping(\"/login\")  \n    public String login(UserDTO userDTO, Model model) {  \n  \n        //넘어온 userDTO가 null인 가능성이 있어서 Optional 사용  \n        Optional<UserDTO> optionalUser = Optional.ofNullable(userDTO);  \n        //isPresent()  \n        //Optional의 값이 존재하면 true, 해당 값이 없으면 false를 리턴합니다.  \n  \n        if(optionalUser.isPresent()) {   //optionalUser이 null이 아닐 경우  \n            boolean isAuthenticated = userService.login(userDTO);  \n            if (isAuthenticated) {  \n                model.addAttribute(\"page\",showLoginPage());  \n                return \"main/main\";  \n            } else {  \n                return \"redirect:/\";  \n            }  \n        }else {  //optionalUser이 null일 경우 다시 로그인 페이지로 이동  \n            model.addAttribute(\"page\",showLoginPage());  \n            return \"main/main\";  \n        }  \n    }  \n}\n```"}
	],
	"edges":[]
}