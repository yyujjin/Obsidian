{
	"nodes":[
		{"id":"5afcd167a568ab86","type":"text","text":"```java\npackage com.sideproject.grading.domain;  \n  \npublic class Question {  \n    private int number;  \n    private boolean isScrap;  \n    private boolean isWrong;  \n  \n    public Question(int number) {  \n        this.number = number;  \n    }  \n  \n    public int getNumber() {  \n        return number;  \n    }  \n}\n``` ","x":-926,"y":839,"width":806,"height":421},
		{"id":"5e5cfaa895027dd7","type":"text","text":"# DOMAIN","x":-926,"y":660,"width":250,"height":60},
		{"id":"5f3c79236a0b7ce3","type":"text","text":"## Question","x":-926,"y":740,"width":250,"height":60},
		{"id":"5b1c1101a0e25467","type":"text","text":"# 분석해야하는 코드 목록","x":-2200,"y":-613,"width":401,"height":101},
		{"id":"c85164ce73522e57","type":"file","file":"Pasted image 20240718144448.png","x":-2199,"y":-457,"width":400,"height":375},
		{"id":"3af9cdfe8bf9a20d","type":"text","text":"```JAVA\n<!DOCTYPE HTML>  \n<html xmlns:th=\"http://www.thymeleaf.org\">  \n<head>  \n    <title>Grading Application</title>  \n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>  \n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\">  \n</head>  \n<body>  \n<div class=\"container vh-100 d-flex justify-content-center align-items-center\">  \n    <div class=\"text-center\">  \n        <div class=\"mb-3\">  \n            <img src=\"/images/start.jpeg\" alt=\"start image\" width=\"300px\">  \n        </div>  \n        <div>  \n            <a class=\"btn btn-primary w-100\" href=\"/answer-selection\">답안 체크하러 가기!</a>  \n        </div>  \n    </div>  \n</div>  \n</body>  \n</html>\n```","x":863,"y":2660,"width":1258,"height":577},
		{"id":"9cc7b94f5f5003e4","type":"text","text":"# Start.HTML\n```html\nhref=\"/answer-selection\n```\n- 요청하면서 디폴트 값으로 1넘김","x":863,"y":2460,"width":576,"height":180},
		{"id":"1ab116a14fc7b665","type":"text","text":"# answer-selectionHTML\n- 답 체크하는 페이지  ","x":-1193,"y":2400,"width":535,"height":120},
		{"id":"c0e2819960cf1ff8","type":"text","text":"# CONTROLLER","x":-40,"y":-440,"width":276,"height":61},
		{"id":"d1e368f9687e5260","type":"text","text":"## AnswerSelectionController","x":-40,"y":-365,"width":467,"height":56},
		{"id":"017e25f780058752","type":"text","text":"```JAVA\nList<Integer> wrongAnswers = wrongAnswerService.getWrongAnswers();\n```\n","x":5101,"y":697,"width":700,"height":85},
		{"id":"ab36041afc762517","type":"text","text":"틀린 답 받아오기","x":5301,"y":609,"width":250,"height":60},
		{"id":"7f623a6c9d19fece","type":"text","text":"# DOMAIN","x":7941,"y":-402,"width":250,"height":60},
		{"id":"87c8838943fc30c2","type":"text","text":"```JAVA\npackage com.sideproject.grading.domain;  \n  \nimport java.util.HashMap;  \nimport java.util.Map;  \n  \npublic class CorrectAnswers {  \n    private static Map<Integer, Integer> answers = new HashMap<Integer, Integer>() {{  \n        put(1, 2);  \n        put(2, 3);  \n        put(3, 1);  \n        put(4, 4);  \n        put(5, 2);  \n        put(6, 1);  \n        put(7, 3);  \n        put(8, 4);  \n        put(9, 2);  \n        put(10, 1);  \n        put(11, 3);  \n        put(12, 4);  \n        put(13, 2);  \n        put(14, 1);  \n        put(15, 3);  \n        put(16, 4);  \n        put(17, 2);  \n        put(18, 1);  \n        put(19, 3);  \n        put(20, 4);  \n        put(21, 2);  \n        put(22, 1);  \n        put(23, 3);  \n        put(24, 4);  \n        put(25, 2);  \n        put(26, 1);  \n        put(27, 3);  \n        put(28, 4);  \n        put(29, 2);  \n        put(30, 1);  \n    }};  \n  \n    public static Map<Integer, Integer> getAnswers() {  \n        return answers;  \n    }  \n}\n```","x":7941,"y":-242,"width":908,"height":982},
		{"id":"d479777ae93be0cc","type":"text","text":"## CorrectAnswers \n문제의 정답","x":7941,"y":-342,"width":309,"height":100},
		{"id":"a73fb635bf7e33c4","type":"text","text":"```JAVA\npackage com.sideproject.grading.service;  \n  \nimport com.sideproject.grading.domain.CorrectAnswers;  \nimport com.sideproject.grading.domain.SelectedAnswer;  \nimport com.sideproject.grading.domain.SelectedAnswerManager;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.stereotype.Service;  \n  \nimport java.util.ArrayList;  \nimport java.util.List;  \nimport java.util.Map;  \nimport java.util.Set;  \n  \n@Service  \npublic class WrongAnswerService {  \n\n\n    //🤔여기서 빈을 한번 더 주입하는 이유??\n    @Autowired  \n    public WrongAnswerService() {}  \n\t//이 메서드가 실행됨\n    public List<Integer> getWrongAnswers() {  \n        List<Integer> wrongAnswers = new ArrayList<>();  \n\t//정답지 가져와서 \n        Map<Integer, Integer> correctAnswers = CorrectAnswers.getAnswers();  \n\t   //selectedAnswers 배열을 가져와서 selectedAnswers 맵에 저장\n\t   //맵형식- {번호 :SelectedAnswer객체}     \n        Map<Integer, SelectedAnswer> selectedAnswers = SelectedAnswerManager.getSelectedAnswers();  \n\t//🤔SET 컬렉션의 기능이 있었는데 자동정렬인가, 중복인가\n\t\n\t//📌`Map.Entry` 인터페이스는 키와 값을 가져오는 메서드(`getKey()`, `getValue()`)를 정의\n\t//📌'entrySet()'맵의 모든 키-값 쌍을 반복하고 출력\n\t//selectedAnswers 맵에 저장된 요소 하나하나를 모두 출력해서 SET컬렉션에 저장 -> SET때문에 순서대로 저장     \n        Set<Map.Entry<Integer, SelectedAnswer>> entries = selectedAnswers.entrySet();  \n    //for-each를 사용해 entries에 저장된 맵의 요소 하나하나를 빼냄\n        for (Map.Entry<Integer, SelectedAnswer> entry: entries) {  \n\t        //entry의 키값을 파라미터로 보내서 correctAnswer(정답배열) 에 해당되는 키의 value를 가져옴\n            int correctAnswer = correctAnswers.get(entry.getKey());  \n            //일치하지 않으면 해당 value를 위에서 선언한 wrongAnswers 배열에 넣음\n            if (entry.getValue().getAnswer() != correctAnswer) {  \n                wrongAnswers.add(entry.getKey());  \n            }  \n        }  \n  \n        return wrongAnswers;  \n    }  \n}\n``` ","x":6206,"y":205,"width":1030,"height":1070},
		{"id":"3b7e742dbbe8b1c8","type":"text","text":"# SERVICE","x":6206,"y":-99,"width":250,"height":63},
		{"id":"f03820520e0367dd","type":"text","text":"## WrongAnswerService\n\n- 정답지 배열 가져오고\n- 사용자가 선택한 배열가져와서\n- set으로 순서 정렬하고\n- 정답이랑 틀린 답은  wrongAnswers 배열에 저장하는 기능 ","x":6206,"y":-36,"width":600,"height":210},
		{"id":"b989b00243e447ae","type":"text","text":"# DOMAIN","x":8025,"y":1058,"width":250,"height":60},
		{"id":"212831ad16a6ef21","type":"text","text":"## SelectedAnswerManager\n\n사용자가 선택한 답들의 모음      \n문제들이 모여 배열을 이룸","x":8025,"y":1118,"width":447,"height":141},
		{"id":"665e9f1e98cd1936","type":"text","text":"# DOMAIN","x":9530,"y":1049,"width":250,"height":60},
		{"id":"7f6524362961c9c8","type":"text","text":"## SelectedAnswer\n껍데기\n문제 하나 당 저장되는 형식\n타입 설정","x":9530,"y":1109,"width":442,"height":139},
		{"id":"78695a0d8290d090","type":"text","text":"```JAVA\npackage com.sideproject.grading.domain;  \n  \npublic class SelectedAnswer {  \n    private int number;  \n    private int answer;  \n  \n    public SelectedAnswer(int number, int answer) {  \n        this.number = number;  \n        this.answer = answer;  \n    }  \n  \n    public int getNumber() {  \n        return number;  \n    }  \n  \n    public int getAnswer() {  \n        return answer;  \n    }  \n  \n}\n```","x":9530,"y":1248,"width":782,"height":481},
		{"id":"bb5e5115bb71f1be","type":"text","text":"```JAVA\npackage com.sideproject.grading.domain;  \n  \nimport java.util.Map;  \n  \npublic class  SelectedAnswerManager {  \n\t//오른쪽에 selectedAnswers타입을 selectedAnswers을 전역 변수로 배열 선언 \n\t//숫자 : SelectedAnswer객체 형식\n    private static Map<Integer, SelectedAnswer> selectedAnswers;  \n\t//GETTER\n\t//🤔어노테이션으로 안쓴 이유가 있는지?\n    public static Map<Integer, SelectedAnswer> getSelectedAnswers() {  \n        return selectedAnswers;  \n    }  \n\t//SETTER\n    public static void setSelectedAnswers(Map<Integer, SelectedAnswer> selectedAnswers) {  \n        SelectedAnswerManager.selectedAnswers = selectedAnswers;  \n    }  \n  \n  \n}\n```","x":8025,"y":1259,"width":905,"height":459},
		{"id":"2236a740fe701643","type":"text","text":"# CONTROLLER","x":3840,"y":-197,"width":276,"height":61},
		{"id":"e874f2d333a1f4b5","type":"text","text":"## GradingController\n- 정답 채점","x":3840,"y":-114,"width":441,"height":183},
		{"id":"614c21290ffe2762","type":"text","text":"```java\n\npackage com.sideproject.grading.controller;\n\nimport com.sideproject.grading.domain.SelectedAnswer;\nimport com.sideproject.grading.domain.SelectedAnswerManager;\nimport com.sideproject.grading.service.WrongAnswerService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Controller\npublic class GradingController {\n\n\t//틀린문제 핸들링하는 서비스단 가져오기\n    private WrongAnswerService wrongAnswerService;\n\n\t//이 컨트롤러에서 사용할 수 있게 만들어주기\n\t//🤔나는 그냥 Autowired 로 했는데 이렇게 해주는 이유가 있는지 private으로 하면 더 좋다고는 하는데 \n    public GradingController(WrongAnswerService wrongAnswerService) {\n        this.wrongAnswerService = wrongAnswerService;\n    }\n\n\t//start html 연결\n    @GetMapping(\"/\")\n    public String start() {\n        return \"start\";\n    }\n\n\t//result html 연결\n    @GetMapping(\"/result\")\n    public String result() {\n        return \"result\";\n    }\n\n    @GetMapping(\"/wrong-answer\")\n    public String wrongAnswer(Model model) {\n        // TODO answer-selection 에서 받아올 데이터\n        // answer-selection 에서 데이터 받아와서 \n        // Radio 번호,  answer-selection 에서 받아온 선택된 데이터 형식으로 저장 \n        Map<Integer, SelectedAnswer> testAnswers = new HashMap<>();\n        testAnswers.put(1, new SelectedAnswer(1, 2));\n        testAnswers.put(2, new SelectedAnswer(2, 4));\n        testAnswers.put(3, new SelectedAnswer(3, 2));\n    \n\t    //1. 사용자가 선택한 답들 받아와서 밑에 메서드실행해서 배열로 저장시키고\n        SelectedAnswerManager.setSelectedAnswers(testAnswers);\n\t\t//2. 정답이랑 위에 저장된 배열이랑 비교해서 틀린답 배열 받아옴     \n        List<Integer> wrongAnswers = wrongAnswerService.getWrongAnswers();\n\t\t//받아온 값 wrong-answer.HTML로 넘겨서 화면에 출력\n        model.addAttribute(\"wrongAnswers\", wrongAnswers);\n\n        return \"wrong-answer\";\n    }\n}\n```","x":3840,"y":69,"width":1021,"height":1340},
		{"id":"5c873ce27e63561c","x":-621,"y":724,"width":250,"height":60,"type":"text","text":""},
		{"id":"22026676f0ef570e","type":"text","text":"```html\n<!DOCTYPE HTML>  \n<html xmlns:th=\"http://www.thymeleaf.org\">  \n<head>  \n    <title>Grading Application</title>  \n    <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\"/>  \n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">  \n</head>  \n<body>  \n<form action=\"/questions/next\" class=\"container p-5 d-flex gap-3 flex-column justify-content-center align-items-center\"  \n      method=\"post\">  \n      <!--이런 형태로 5개가 넘어갈거야 서버로 -->  \n    <div class=\"w-50 d-flex flex-column mb-5\"  \n         th:each=\"number : ${#numbers.sequence((page - 1) * limitCount + 1, page * limitCount)}\">  \n        <div class=\"d-flex align-items-center mb-2\">  \n            <span class=\"pe-2\" th:text=\"${number} + 번\">1번</span>  \n            <div>  \n                <input autocomplete=\"off\" class=\"btn-check btn-mark\"  \n                       th:attr=\"id=${'btn-check-scrap-'+number}, name=${number+'-mark'}\" type=\"radio\">  \n                <label class=\"btn btn-outline-secondary\" th:attr=\"for=${'btn-check-scrap-'+number}\">  \n                    <img src=\"/images/scrap.jpeg\" width=\"20\"/>  \n                    알쏭달쏭  \n                </label>  \n                <input autocomplete=\"off\" class=\"btn-check btn-mark\"  \n                       th:attr=\"id=${'btn-check-wrong-'+number}, name=${number+'-mark'}\" type=\"radio\">  \n                <label class=\"btn btn-outline-secondary\" th:attr=\"for=${'btn-check-wrong-'+number}\">  \n                    <img src=\"/images/wrong.jpeg\" width=\"20\"/>  \n                    모르겠다  \n                </label>  \n            </div>  \n        </div>  \n        <div class=\"d-flex justify-content-around border p-2\">  \n            <label class=\"pe-4\">  \n                <input required th:attr=\"name=${number+'_answer'}\" type=\"radio\" value=\"1\">  \n                1  \n            </label>  \n            <label class=\"pe-4\">  \n                <input required th:attr=\"name=${number+'_answer'}\" type=\"radio\" value=\"2\">  \n                2  \n            </label>  \n            <label class=\"pe-4\">  \n                <input required th:attr=\"name=${number+'_answer'}\" type=\"radio\" value=\"3\">  \n                3  \n            </label>  \n            <label class=\"pe-4\">  \n                <input required th:attr=\"name=${number+'_answer'}\" type=\"radio\" value=\"4\">  \n                4  \n            </label>  \n  \n        </div>  \n    </div>  \n    <input name=\"scrap\" type=\"hidden\">  \n    <input name=\"page\" th:attr=\"value=${page}\" type=\"hidden\">  \n    <input id=\"pageType\" name=\"pageType\" type=\"hidden\">  \n    <div>  \n\t    \n\t    <!-- data-type=\"prev\" 이면 이전으로-->  \n\t    \n\t    <!-- data-type=\"next\" 이면 다음으로 가는 걸 js로  조절하고 js에서 next라는 파라미터로 넘어올 때 다음 페이지로 이동하는 컨트롤러 작동하는 듯-->\n        <!--1번 페이지면 이전 페이지 불가 -->  \n        <button class=\"btn btn-secondary\" data-type=\"prev\" th:classappend=\"${page == 1} ? 'disabled' : ''\"  \n                type=\"submit\"> << 이전 페이지  \n        </button>  \n        <!--이런 알고리즘은 어케 생각하는거지 -->  \n        \n           <!--`th:attr=\"name=${number+'_answer'}\"`와 같은 형태로 Thymeleaf에서 생성된 HTML 요소를 서버로 전송하면, 이 요소는 서버에서 `request.getParameterNames()`를 통해 파라미터 이름을 확인할 수 있습니다. -->\n           <!--🤔data-type=\"next\" => 이건 js에서 이벤트 적용하기 위해 필요한건가?   -->\n        <button class=\"btn btn-primary\" data-type=\"next\" th:text=\"${page == totalCount / limitCount} ? ' >> 결과화면' : ' >> 다음 페이지'\"  \n                type=\"submit\"></button>  \n    </div>  \n</form>  \n<script src=\"/js/answer-selection.js\"></script>  \n</body>  \n</html>\n```","x":-1180,"y":3320,"width":1534,"height":1610},
		{"id":"1f7c37e0cd61a3a1","x":2200,"y":280,"width":1054,"height":424,"type":"text","text":"```java\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    // 클라이언트에서 전송된 모든 파라미터 이름들을 가져오기\n    Enumeration<String> parameterNames = request.getParameterNames();\n\n    // 각 파라미터 이름을 순회하면서 처리\n    while (parameterNames.hasMoreElements()) {\n        String paramName = parameterNames.nextElement();\n        // paramName 변수에는 현재 순회 중인 파라미터의 이름이 저장됨\n        System.out.println(\"Parameter Name: \" + paramName);\n        // 실제 파라미터 값을 가져올 수도 있음\n        String paramValue = request.getParameter(paramName);\n        System.out.println(\"Parameter Value: \" + paramValue);\n    }\n}\n\n```"},
		{"id":"d884db9c6a26c940","type":"text","text":"```java\npackage com.sideproject.grading.controller;  \n  \nimport com.sideproject.grading.domain.SelectedAnswerManager;  \nimport com.sideproject.grading.service.AnswerSelectionService;  \nimport jakarta.servlet.http.HttpServletRequest;  \nimport org.springframework.beans.factory.annotation.Value;  \nimport org.springframework.stereotype.Controller;  \nimport org.springframework.ui.Model;  \nimport org.springframework.web.bind.annotation.GetMapping;  \nimport org.springframework.web.bind.annotation.PostMapping;  \nimport org.springframework.web.bind.annotation.RequestParam;  \n  \nimport java.util.Enumeration;  \nimport java.util.HashMap;  \nimport java.util.Map;  \n  \n@Controller  \npublic class AnswerSelectionController { \n\t//생성자 기반 주입, 클래스 생성시 자동으로 해당 서비스 빈 주입됨 \n    private final AnswerSelectionService answerSelectionService;  \n\t\n\t//외부 설정 파일(예: `application.properties` 또는 `application.yml`)에서 값을 가져와 필드에 주입하는 데 사용됩니다.\n\t//총 문제는 30이고 한페이지당 5개씩 출력 \n    @Value(\"${answer.totalCount}\")  \n    int totalCount;  \n  \n    @Value(\"${page.limitCount}\")  \n    int limitCount;  \n\t//@AllArgsConstructor 사용해도 될듯?\n    public AnswerSelectionController(AnswerSelectionService answerSelectionService) {  \n        this.answerSelectionService = answerSelectionService;  \n    }  \n\n\t//답안 선택하기 버튼을 누르면 실행됨 (완전 첫페이지에서)\n    @GetMapping(\"/answer-selection\") \n    //해당 페이지 번호를 파라미터로 받고 디폴트는 1로 한다.  \n    public String answerSelection(@RequestParam(value = \"page\", defaultValue = \"1\") int page, Model model) {  \n\n\t\t//페이지를 더해서 프론트단에 넘겨주는 코드는 아직인건가?\n\t\t//아직 1번 페이지 밖에 안되는거지?\n        model.addAttribute(\"page\", page);  \n        model.addAttribute(\"totalCount\", totalCount);  \n        model.addAttribute(\"limitCount\", limitCount);  \n       \n        return \"answer-selection\";  \n    }  \n\n\n\t//선택한 \n    @PostMapping(\"/questions/next\")  \n    public String next(HttpServletRequest request) {  \n    \n\t    //parameters 라는 HashMap을 생성하고 \n        Map<String, String> parameters = new HashMap<>();  \n\t\n\t\t//getParameterNames() : HTTP 요청에서 모든 파라미터 이름들을 `Enumeration<String>` 형태로 반환합니다.\n\t\t//알쏭달쏭, 모르겠다, 선택한 radio의 파라미터가 넘어옴\n\t\t//1-mark : btn-check-scrap-1\n\t\t//1-mark : btn-check-wrong-1\n\t\t//1_answer : 1\n\t\t//이런형태로 값이 넘어오는건가?\n\t\t//이런 형태가 parameterNames 열거형으로 저장되고 \n        Enumeration<String> parameterNames = request.getParameterNames();  \n\n\n//hasMoreElements() => 주어진 열거형(Enumeration) 객체에서 더 이상 요소가 남아 있는지 여부를 판단하여 반환 값이 있으면 true, 없으면 false 반환\n//이게 총 5번 반복되지\n        while (parameterNames.hasMoreElements()) {  \n\t        //html에서 name에 해당하는 부분이 저장됨\n\t        // 1-mark <- 이런거 \n            String paramName = parameterNames.nextElement();  \n            //`request.getParameter(String name)` 메서드는 주어진 이름(name)에 해당하는 파라미터 값을 문자열(String) 형태로 반환합니다.\n            parameters.put(paramName, request.getParameter(paramName));  \n        }  \n\t\t//1차로 answerSelectionService.getSelectedAnswers(parameters) 이렇게 넘기고\n\t\t//2차로 그 반환값으로 SelectedAnswerManager.setSelectedAnswers이걸 실행\n        SelectedAnswerManager.setSelectedAnswers(answerSelectionService.getSelectedAnswers(parameters));  \n  \n        int nextPage = answerSelectionService.getPage(parameters);  \n  \n        if (nextPage > totalCount / limitCount) {  \n            return \"redirect:/result\";  \n        }  \n  \n        return \"redirect:/answer-selection?page=\" + nextPage;  \n    }  \n  \n}\n```","x":-120,"y":-1141,"width":1580,"height":1895},
		{"id":"9f595dbd2d7991b5","x":-111,"y":-2880,"width":1563,"height":1291,"type":"text","text":"```java\npackage com.sideproject.grading.service;  \n  \nimport com.sideproject.grading.domain.SelectedAnswer;  \nimport com.sideproject.grading.domain.SelectedAnswerManager;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.stereotype.Service;  \n  \nimport java.util.ArrayList;  \nimport java.util.HashMap;  \nimport java.util.List;  \nimport java.util.Map;  \n  \n@Service  \npublic class AnswerSelectionService {  \n\t//🤔 이걸 또 주입하는 이유는 뭐야?\n    @Autowired  \n    public AnswerSelectionService() {  \n    }  \n    public Map<Integer, SelectedAnswer> getSelectedAnswers(Map<String, String> parameters) {  \n        Map<Integer, SelectedAnswer> selectedAnswers = new HashMap<>();  \n        \n  //`entrySet()` 메서드는 `Map` 인터페이스에 정의된 메서드로, 맵의 모든 키-값 쌍을 포함하는 `Set<Map.Entry<K, V>>`을 반환합니다.\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {  \n            String paramName = entry.getKey();  \n            if (paramName.endsWith(\"_answer\")) {  \n                String questionNumberStr = paramName.split(\"_\")[0];  \n                int questionNumber = Integer.parseInt(questionNumberStr);  \n                int answerNumber = Integer.parseInt(entry.getValue());  \n  \n                selectedAnswers.put(questionNumber, new SelectedAnswer(questionNumber, answerNumber));  \n            }  \n        }  \n  \n        return selectedAnswers;  \n    }  \n//\"/questions/next\"매핑 시 1차로 여기 호출됨  \n    public int getPage(Map<String, String> parameters) {  \n        int page = 1;  \n        String pageType = \"next\";  \n  //맵에 저장된거 하나씩 꺼내고 \n        for (Map.Entry<String, String> entry : parameters.entrySet()) {  \n        //키 저장하고\n            String paramName = entry.getKey();  \n            //만약 p\n            if (paramName.equals(\"page\")) {  \n                page = Integer.parseInt(entry.getValue());  \n            } else if (paramName.equals(\"pageType\")) {  \n                pageType = entry.getValue();  \n            }  \n        }  \n  \n        if (pageType.equals(\"prev\")) {  \n            return --page;  \n        }  \n  \n        return ++page;  \n    }  \n}\n```"},
		{"id":"dc4881c89ae081bc","x":-111,"y":-3040,"width":250,"height":50,"type":"text","text":"# SERVICE"},
		{"id":"c3fd626b992b14c9","x":-111,"y":-2973,"width":359,"height":50,"type":"text","text":"##  AnswerSelectionService"}
	],
	"edges":[
		{"id":"c800aaf41fadf407","fromNode":"87c8838943fc30c2","fromSide":"left","toNode":"a73fb635bf7e33c4","toSide":"right"},
		{"id":"7e5746cd5edee4e4","fromNode":"bb5e5115bb71f1be","fromSide":"left","toNode":"a73fb635bf7e33c4","toSide":"right"},
		{"id":"4aeddeffe529a5c2","fromNode":"bb5e5115bb71f1be","fromSide":"right","toNode":"78695a0d8290d090","toSide":"left"},
		{"id":"48b137566fff0e33","fromNode":"a73fb635bf7e33c4","fromSide":"left","toNode":"614c21290ffe2762","toSide":"right"},
		{"id":"689f33801c40782e","fromNode":"3af9cdfe8bf9a20d","fromSide":"top","toNode":"d884db9c6a26c940","toSide":"bottom"},
		{"id":"5aa938093b6d88c9","fromNode":"22026676f0ef570e","fromSide":"top","toNode":"d884db9c6a26c940","toSide":"bottom"},
		{"id":"8a51f5401597b019","fromNode":"d884db9c6a26c940","fromSide":"top","toNode":"9f595dbd2d7991b5","toSide":"bottom"},
		{"id":"7455ebf7df5329d0","fromNode":"d884db9c6a26c940","fromSide":"right","toNode":"1f7c37e0cd61a3a1","toSide":"left"}
	]
}