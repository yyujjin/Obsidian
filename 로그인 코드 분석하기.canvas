{
	"nodes":[
		{"id":"71dc42c610125534","type":"text","text":"```java\n@PostMapping(\"/login_yn\")\n\n\n//🙋‍♀️ 파라미터를 넘기는게 아니라 dto로 바로 매핑하게 하면 어떰?\n\npublic String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {\n\nlog.info(\"@# login_yn\"); \n\n\n//name과 value가 있는 것들이 파라미터로 넘어옴 => 로그인 타입(기업, 개인), 아이디, 비밀번호 \n\n//{loginType=individual, memId=user01, memPwd=1234}\n\n\n\n//📌컨트롤러와 서비스의 기능을 명확히 구분하는게 좋을 것같음\n\n//📌UserManagementService 로 서비스 생성해서 밑에 코드 넣기\n\n\n\n//로그인 타입을 확인해서\n//🤔여기서 로그인 타입을 굳이 왜 확인하는 거지 어차피 파라미터 넘길껀데\n\nString loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)\n\n//📌List로 변경하는게 좋을 듯\n//🙋‍♀️여기도 dto를 파라미터로 넘기는 거지\n//🤔근데 여기서 리스트를 반환 받을 게 없지않나? 그냥 아이디, 비번 맞는지 확인하는건데 유저 정보를 리스트로 저장하는 코드는 필요 없을 것 같음.\n//마이바티스 기능 이용해서 일치 유무만 확인하면 될 것 같음\n//단지 로그인체크해서 사용자 아이디만 받아올거면 리스트가 아닌 string으로 받아오면 될듯\nArrayList<MemDTO> user = service.loginYn(param);\n\n```","x":2160,"y":-1497,"width":880,"height":857},
		{"id":"88e684814e2ded2f","type":"text","text":"##  service.loginYn(param)","x":3420,"y":-1462,"width":394,"height":62},
		{"id":"77a8ef49ea8c550a","type":"text","text":"# MemServiceImpl","x":3420,"y":-1520,"width":300,"height":58},
		{"id":"1329e917a6a7676e","type":"text","text":"```java\n package com.jjobkorea.service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport org.apache.ibatis.session.SqlSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Service;\n\nimport com.jjobkorea.dto.MemDTO;\nimport com.jjobkorea.mapper.MemMapper;\nimport com.oracle.wls.shaded.org.apache.regexp.recompile;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Service\npublic class MemServiceImpl implements MemService {\n   @Autowired\n   private SqlSession sqlSession;\n\n    @Override\n    public ArrayList<MemDTO> loginYn(HashMap<String, String> param) {\n        log.info(\"@# MemServiceImpl loginYn\");\n\n        MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n        \n        ArrayList<MemDTO> list = mapper.loginYn(param);\n\n        return list;\n    }\n\n    @Override\n    public void write(HashMap<String, String> param) {\n       MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n       \n       mapper.write(param);\n    }\n       \n\n    @Override\n    public ArrayList<MemDTO> selectByCpId(HashMap<String, String> param) {\n       MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n       \n       ArrayList<MemDTO> dto = mapper.selectByCpId(param);\n       \n       return dto;\n    }\n\n    @Override\n    public int checkCpRegistrationNum(HashMap<String, String> param) {\n       MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n       \n       int dto = mapper.checkCpRegistrationNum(param);\n       \n       return dto; \n    }\n}\n \n```","x":15520,"y":5920,"width":1631,"height":1430},
		{"id":"b46289d3f737efc1","type":"text","text":"# 균호씨 ","x":15520,"y":5860,"width":250,"height":60},
		{"id":"0f128f8dd6b42b11","type":"text","text":"```java\n\n@Override\n//파라미터 넘어와서 \npublic ArrayList<MemDTO> loginYn(HashMap<String, String> param) {\n\n\n//🔥 이 코드 삭제하기\nString sql = \"SELECT tb.memId, tb.memPwd, tb.memName, tb.cpId, cp.companyType, cp.companyRegistrationNum, cp.companyRepresentativeName, cp.companyName, cp.companyAddr, cp.companyBusinessRegistration AS companyBusinessRegistration, tb.userType FROM signup_tb tb LEFT JOIN signup_cp cp ON tb.cpId = cp.id WHERE tb.memId = ?\";\n//📌매퍼 연결하는 코드 같은데 매퍼명 바꾸고 파라미터도 dto로 넘기기\n//유저 전체 리스트를 가져오고 있음 \nList<MemDTO> result = jdbcTemplate.query(sql, memRowMapper, param.get(\"memId\"));\n\n  \n\nreturn new ArrayList<>(result);\n\n}\n```","x":3420,"y":-1400,"width":3020,"height":527},
		{"id":"bf688592c2b48fc9","type":"text","text":"JDBC(Java Database Connectivity)를 사용하여 데이터베이스와 직접적으로 상호작용하는 방식으로 구현되어 있습니다. 여기서 JDBC는 `JdbcTemplate` 클래스를 통해 데이터베이스와의 연결을 관리하고, SQL 쿼리를 실행하여 결과를 가져오는 역할","x":5260,"y":-1687,"width":1072,"height":107},
		{"id":"87639ccd5e0e8c31","type":"text","text":"# 이 코드의 역할?\n- 매퍼를 부르지 않고 해당 서비스 코드에서 db 연결 다 해서 쿼리문 날리고 결과 받아오는 거 같음 ","x":3814,"y":-1600,"width":580,"height":200},
		{"id":"43c62152aa9cd1b1","type":"text","text":"## 도대체 이게 뭐지?\n- dto에서 해야될껄 왜 서비스에서 하고 있지??\n- 마이바티스로 가능 한걸 RowMapper 인터페이스 사용해서 수동으로 하고 있음 ","x":3967,"y":-3280,"width":680,"height":220},
		{"id":"6c8a83ec8cb68b11","type":"text","text":"# MemServiceImpl","x":3447,"y":-3120,"width":340,"height":60},
		{"id":"3e993d14296bbd08","type":"text","text":"```java\n\n//🔥 이 코드 삭제해야 할 것 같음 \n\n@Autowired\n\nprivate JdbcTemplate jdbcTemplate;\n\n  \n\nprivate RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> {\n\nMemDTO mem = new MemDTO();\n\nmem.setMemId(rs.getString(\"memId\"));\n\nmem.setMemPwd(rs.getString(\"memPwd\"));\n\nmem.setMemName(rs.getString(\"memName\"));\n\nmem.setCpId(rs.getInt(\"cpId\"));\n\nmem.setCompanyType(rs.getString(\"companyType\"));\n\nmem.setCompanyRegistrationNum(rs.getString(\"companyRegistrationNum\"));\n\nmem.setCompanyRepresentativeName(rs.getString(\"companyRepresentativeName\"));\n\nmem.setCompanyName(rs.getString(\"companyName\"));\n\nmem.setCompanyAddr(rs.getString(\"companyAddr\"));\n\nmem.companyBusinessRegistration(rs.getString(\"companyBusinessRegistration\")); // 이 필드 사용\n\nmem.setUserType(rs.getInt(\"userType\"));\n\nreturn mem;\n\n};\n```","x":3447,"y":-3060,"width":1312,"height":900},
		{"id":"1a65f24c1edf15a4","type":"text","text":"`RowMapper` 인터페이스\n\n`private RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> { ... };`에서 `rs`와 `rowNum`은 `RowMapper` 인터페이스의 `mapRow` 메서드의 매개변수입니다.\n\n- `rs`는 데이터베이스 쿼리를 실행한 결과인 `ResultSet` 객체입니다.\n- `ResultSet` 객체는 데이터베이스로부터 가져온 데이터를 가지고 있으며, 특정 행(row)의 데이터에 접근할 수 있는 메서드들을 제공합니다.\n- `rs.getString(\"memId\")`, `rs.getInt(\"cpId\")` 등과 같이 `ResultSet` 객체의 메서드를 사용하여 각 열(column)의 값을 가져올 수 있습니다.\n\n\n\n`RowMapper`는 개발자가 직접 구현해야 하는 인터페이스입니다.\n개발자는 `ResultSet`에서 데이터를 읽어와서 객체의 필드에 수동으로 설정해야 합니다.","x":5160,"y":-2789,"width":1392,"height":284},
		{"id":"49c6403f319aac62","type":"text","text":"# Refactory 제안 \n- checkUser 메서드 생성해서 아이디, 비번만 넘겨서\n- 불일치하면 핸들링하는 코드 쓰고\n- 일치하면 아이디만 가져오는 코드작성","x":3920,"y":-754,"width":359,"height":308},
		{"id":"3c962943a9740d7c","type":"text","text":"# 개선해야 할 사항\n- 빈 필드 주입 말고 생성자 주입으로 \n- 메서드 명, 변수 명 수정","x":-6080,"y":-1750,"width":459,"height":280},
		{"id":"dda97059d4fd693a","type":"text","text":"# 회원관리\n- 기업\n- 개인이랑 enum 생성하고\n- 유저 관리 서비스 만들고\n- dto를 유저, 기업 따로 만들고\n- 그 안에서  타입 구분해서 해당 dto 실행하는 식으로 \n- ","x":3920,"y":-446,"width":520,"height":266},
		{"id":"e7e3abf1f3b04cb2","x":2160,"y":-1563,"width":394,"height":72,"type":"text","text":"## @PostMapping(\"/login_yn\")"},
		{"id":"2db17c65067637ca","type":"text","text":"# MemController","x":2160,"y":-1620,"width":297,"height":57},
		{"id":"8c7cc097fcb066d1","type":"text","text":"# login.jsp","x":-120,"y":-1651,"width":250,"height":60},
		{"id":"c43dc24825c78d05","type":"text","text":"```java\n<!--개인-->\n\n<form id=\"individualForm\" method=\"post\" action=\"/login_yn\">\n\n<input type=\"hidden\" name=\"loginType\" value=\"individual\">\n\n<div class=\"input-container\">\n\n<input type=\"text\" name=\"memId\" placeholder=\"아이디\" required>\n\n</div>\n\n<div class=\"input-container\">\n\n<input type=\"password\" name=\"memPwd\" placeholder=\"비밀번호\" required>\n\n</div>\n\n<button type=\"submit\">로그인</button>\n\n<span class=\"register-link\" data-type=\"individual\">회원가입</span>\n\n</form>\n\n\n<!--기업-->\n\n<form id=\"companyForm\" method=\"post\" action=\"/login_yn\" style=\"display: none;\">\n\n<input type=\"hidden\" name=\"loginType\" value=\"enterprise\">\n\n<div class=\"input-container\">\n\n<input type=\"text\" name=\"memId\" placeholder=\"기업회원아이디\" required>\n\n</div>\n\n<div class=\"input-container\">\n\n<input type=\"password\" name=\"memPwd\" placeholder=\"비밀번호\" required>\n\n</div>\n\n<button type=\"submit\">로그인</button>\n\n<span class=\"register-link\" data-type=\"enterprise\">회원가입</span>\n\n</form>\n```","x":-120,"y":-1591,"width":1140,"height":1080},
		{"id":"f125be6adfc80906","type":"text","text":"## 로그인 기능","x":130,"y":-1641,"width":276,"height":50},
		{"id":"8fc3aa15e94bf142","type":"text","text":"### 폼 작성하고 버튼 누르면 실행됨 ","x":1340,"y":-1078,"width":489,"height":50},
		{"id":"0ea6e9ebad193499","x":3420,"y":200,"width":935,"height":255,"type":"text","text":"```java\nconst urlParams = new URLSearchParams(window.location.search);\n\n\n//만약 파라미터에 error를 가지고 있으면 알림창 띄워라.\nif (urlParams.has('error')) {\n\nalert('아이디 또는 비밀번호가 일치하지 않습니다. 다시 확인 후 입력해주시기 바랍니다.');\n\n}\n```"},
		{"id":"850cdead01562c3a","x":3420,"y":131,"width":385,"height":69,"type":"text","text":"# login.jsp (script 부분)"},
		{"id":"1b6a4bd66b807b37","x":4600,"y":200,"width":560,"height":255,"type":"text","text":"#### URLSearchParams\n\nhttps://jake-seo-dev.tistory.com/159\n\n```javaScript\nconst params = new URLSearchParams(\"foo=1&bar=2\");\nconsole.log(params.get(\"foo\")); // 1\nconsole.log(params.get(\"bar\")); // 2\n```\n\n"},
		{"id":"5ee8548fa4e38cee","x":2300,"y":218,"width":625,"height":220,"type":"text","text":"```java\nif (user.isEmpty()) {\n\n\n//만약 받아온 데이터가 없으면  로그인 페이지로 리다이렉트 \nreturn \"redirect:login?error=true\";\n\n}\n```"},
		{"id":"0b595fb8c1a6f68b","x":1950,"y":1080,"width":1326,"height":241,"type":"text","text":"```java\n//\nif ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {\n\nlog.info(\"로그인 유형이 일치하지 않습니다.\");\n\nreturn \"redirect:login?error=true\";\n\n}\n```"},
		{"id":"227af17cd18a14e3","type":"text","text":"데이터 list로  받아와서 넘기기   ","x":3320,"y":-660,"width":322,"height":60},
		{"id":"95deb3e69c07d39e","x":2328,"y":600,"width":570,"height":120,"type":"text","text":"```java\n//유저 전체 리스트 중에 0번째 인덱스에 있는 유저 정보를 저장함 \nMemDTO foundUser = user.get(0);\n```"},
		{"id":"c28dc3f526e0120f","x":3475,"y":1171,"width":880,"height":60,"type":"text","text":"`jdbcTemplate.query()` 메서드에서 `-1`이 넘어오는 경우는 일반적으로 쿼리 실행 결과가 없을 때"},
		{"id":"7a97504012650e99","x":1950,"y":981,"width":381,"height":99,"type":"text","text":"# Refactory 제안\n\n유저, 기업 테이블 분리 생성"},
		{"id":"f0d60c2c64cb852e","x":2331,"y":1020,"width":250,"height":60,"type":"text","text":"- 1 => 기업\n- -1 => 유저"}
	],
	"edges":[
		{"id":"dbe65268fcf3c488","fromNode":"c43dc24825c78d05","fromSide":"right","toNode":"71dc42c610125534","toSide":"left"},
		{"id":"4c7ccc1fc23dcf72","fromNode":"71dc42c610125534","fromSide":"right","toNode":"0f128f8dd6b42b11","toSide":"left"},
		{"id":"c74490ab402f17e4","fromNode":"3e993d14296bbd08","fromSide":"right","toNode":"1a65f24c1edf15a4","toSide":"left"},
		{"id":"a24b3ffb69d878f5","fromNode":"0f128f8dd6b42b11","fromSide":"top","toNode":"bf688592c2b48fc9","toSide":"bottom"},
		{"id":"df86564bb9d914fd","fromNode":"0f128f8dd6b42b11","fromSide":"bottom","toNode":"71dc42c610125534","toSide":"bottom"},
		{"id":"22ceb27edc44182a","fromNode":"3e993d14296bbd08","fromSide":"bottom","toNode":"0f128f8dd6b42b11","toSide":"top"},
		{"id":"7c23f8b0550e12bf","fromNode":"71dc42c610125534","fromSide":"bottom","toNode":"5ee8548fa4e38cee","toSide":"top"},
		{"id":"499bd62cc29988f1","fromNode":"5ee8548fa4e38cee","fromSide":"right","toNode":"0ea6e9ebad193499","toSide":"left"},
		{"id":"d93539a3ad270db0","fromNode":"0ea6e9ebad193499","fromSide":"right","toNode":"1b6a4bd66b807b37","toSide":"left"},
		{"id":"e259fdc495e90f93","fromNode":"5ee8548fa4e38cee","fromSide":"bottom","toNode":"95deb3e69c07d39e","toSide":"top"},
		{"id":"44bcefe65dcbf735","fromNode":"95deb3e69c07d39e","fromSide":"bottom","toNode":"0b595fb8c1a6f68b","toSide":"top"},
		{"id":"5215cdb0ebd4d1b3","fromNode":"0b595fb8c1a6f68b","fromSide":"right","toNode":"c28dc3f526e0120f","toSide":"left"}
	]
}