{
	"nodes":[
		{"id":"037fbe32889855e4","type":"text","text":"@PostMapping(\"/login_yn\")\r\n    public String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {\r\n        log.info(\"@# login_yn\");\r\n        String loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)\r\n        ArrayList<MemDTO> user = service.loginYn(param);\r\n\r\n        if (user.isEmpty()) {\r\n            log.info(\"사용자를 찾을 수 없습니다.\");\r\n            return \"redirect:login?error=true\";\r\n        }\r\n\r\n        MemDTO foundUser = user.get(0);\r\n\r\n        // 사용자 유형이 일치하는지 확인\r\n        if ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {\r\n            log.info(\"로그인 유형이 일치하지 않습니다.\");\r\n            return \"redirect:login?error=true\";\r\n        }\r\n\r\n        // 입력된 비밀번호가 데이터베이스에 저장된 비밀번호와 일치하는지 확인\r\n        if (!foundUser.getMemPwd().equals(param.get(\"memPwd\"))) {\r\n            log.info(\"비밀번호가 일치하지 않습니다.\");\r\n            return \"redirect:login?error=true\";\r\n        }\r\n\r\n        // 세션에 사용자 정보 저장\r\n        HttpSession session = request.getSession();\r\n        session.setAttribute(\"user\", foundUser);\r\n        log.info(\"사용자 세션 저장 완료: \" + foundUser.getMemId());\r\n        return \"redirect:main\";\r\n    }\r\n","x":620,"y":-1237,"width":250,"height":60},
		{"id":"c43dc24825c78d05","type":"text","text":"```java\n<!--개인-->\n\n<form id=\"individualForm\" method=\"post\" action=\"/login_yn\">\n\n<input type=\"hidden\" name=\"loginType\" value=\"individual\">\n\n<div class=\"input-container\">\n\n<input type=\"text\" name=\"memId\" placeholder=\"아이디\" required>\n\n</div>\n\n<div class=\"input-container\">\n\n<input type=\"password\" name=\"memPwd\" placeholder=\"비밀번호\" required>\n\n</div>\n\n<button type=\"submit\">로그인</button>\n\n<span class=\"register-link\" data-type=\"individual\">회원가입</span>\n\n</form>\n\n\n<!--기업-->\n\n<form id=\"companyForm\" method=\"post\" action=\"/login_yn\" style=\"display: none;\">\n\n<input type=\"hidden\" name=\"loginType\" value=\"enterprise\">\n\n<div class=\"input-container\">\n\n<input type=\"text\" name=\"memId\" placeholder=\"기업회원아이디\" required>\n\n</div>\n\n<div class=\"input-container\">\n\n<input type=\"password\" name=\"memPwd\" placeholder=\"비밀번호\" required>\n\n</div>\n\n<button type=\"submit\">로그인</button>\n\n<span class=\"register-link\" data-type=\"enterprise\">회원가입</span>\n\n</form>\n```","x":-180,"y":-1720,"width":1140,"height":1080},
		{"id":"8c7cc097fcb066d1","type":"text","text":"# login.jsp","x":-180,"y":-1780,"width":250,"height":60},
		{"id":"f125be6adfc80906","x":70,"y":-1770,"width":276,"height":50,"type":"text","text":"## 로그인 기능"},
		{"id":"57eaffef09af1b9f","x":2360,"y":240,"width":294,"height":60,"type":"text","text":"# MemController"},
		{"id":"74a9bb4ec0f94c7b","x":2320,"y":295,"width":1600,"height":2812,"type":"text","text":"```java\n\n\n  \n\nif (user.isEmpty()) {\n\nlog.info(\"사용자를 찾을 수 없습니다.\");\n\nreturn \"redirect:login?error=true\";\n\n}\n\n  \n\nMemDTO foundUser = user.get(0);\n\n  \n\n// 사용자 유형이 일치하는지 확인\n\nif ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {\n\nlog.info(\"로그인 유형이 일치하지 않습니다.\");\n\nreturn \"redirect:login?error=true\";\n\n}\n\n  \n\n// 입력된 비밀번호가 데이터베이스에 저장된 비밀번호와 일치하는지 확인\n\nif (!foundUser.getMemPwd().equals(param.get(\"memPwd\"))) {\n\nlog.info(\"비밀번호가 일치하지 않습니다.\");\n\nreturn \"redirect:login?error=true\";\n\n}\n\n  \n\n// 세션에 사용자 정보 저장\n\nHttpSession session = request.getSession();\n\nsession.setAttribute(\"user\", foundUser);\n\nlog.info(\"사용자 세션 저장 완료: \" + foundUser.getMemId());\n\nreturn \"redirect:main\";\n\n}\n```"},
		{"id":"71dc42c610125534","x":2160,"y":-1497,"width":880,"height":697,"type":"text","text":"```java\n@PostMapping(\"/login_yn\")\n\npublic String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {\n\nlog.info(\"@# login_yn\"); \n\n\n//name과 value가 있는 것들이 파라미터로 넘어옴 => 로그인 타입(기업, 개인), 아이디, 비밀번호 \n\n//{loginType=individual, memId=user01, memPwd=1234}\n\n\n\n//📌컨트롤러와 서비스의 기능을 명확히 구분하는게 좋을 것같음\n\n//📌UserManagementService 로 서비스 생성해서 밑에 코드 넣기\n\n\n\n//로그인 타입을 확인해서\n//🤔여기서 로그인 타입을 굳이 왜 확인하는 거지 어차피 파라미터 넘길껀데\n\nString loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)\n\n//📌List로 변경하는게 좋을 듯\nArrayList<MemDTO> user = service.loginYn(param);\n```"},
		{"id":"8fc3aa15e94bf142","x":1320,"y":-1207,"width":489,"height":50,"type":"text","text":"### 폼 작성하고 버튼 누르면 실행됨 "},
		{"id":"2db17c65067637ca","x":2160,"y":-1554,"width":297,"height":57,"type":"text","text":"# MemController"},
		{"id":"0f128f8dd6b42b11","x":3420,"y":-1400,"width":3020,"height":527,"type":"text","text":"```java\n\n@Override\n//파라미터 넘어와서 \npublic ArrayList<MemDTO> loginYn(HashMap<String, String> param) {\n\n\n\nString sql = \"SELECT tb.memId, tb.memPwd, tb.memName, tb.cpId, cp.companyType, cp.companyRegistrationNum, cp.companyRepresentativeName, cp.companyName, cp.companyAddr, cp.companyBusinessRegistration AS companyBusinessRegistration, tb.userType FROM signup_tb tb LEFT JOIN signup_cp cp ON tb.cpId = cp.id WHERE tb.memId = ?\";\n\nList<MemDTO> result = jdbcTemplate.query(sql, memRowMapper, param.get(\"memId\"));\n\n  \n\nreturn new ArrayList<>(result);\n\n}\n```"},
		{"id":"88e684814e2ded2f","x":3420,"y":-1462,"width":394,"height":62,"type":"text","text":"##  service.loginYn(param)"},
		{"id":"77a8ef49ea8c550a","x":3420,"y":-1520,"width":300,"height":58,"type":"text","text":"# MemServiceImpl"},
		{"id":"3c962943a9740d7c","x":421,"y":-2640,"width":459,"height":280,"type":"text","text":"# 개선해야 할 사항\n- 빈 필드 주입 말고 생성자 주입으로 "},
		{"id":"b1f8f1f563aa2b45","x":2990,"y":-2,"width":861,"height":544,"type":"text","text":"```java\n@Override\n\npublic ArrayList<MemDTO> loginYn(HashMap<String, String> param) {\n\nlog.info(\"@# MemServiceImpl loginYn\");\n\n  \n\nString sql = \"SELECT tb.memId, tb.memPwd, tb.memName, tb.cpId, cp.companyType, cp.companyRegistrationNum, cp.companyRepresentativeName, cp.companyName, cp.companyAddr, cp.companyBusinessRegistration AS companyBusinessRegistration, tb.userType FROM signup_tb tb LEFT JOIN signup_cp cp ON tb.cpId = cp.id WHERE tb.memId = ?\";\n\nList<MemDTO> result = jdbcTemplate.query(sql, memRowMapper, param.get(\"memId\"));\n\n  \n\nreturn new ArrayList<>(result);\n\n}\n```"},
		{"id":"3e993d14296bbd08","x":3420,"y":-2720,"width":1312,"height":825,"type":"text","text":"```java\n@Autowired\n\nprivate JdbcTemplate jdbcTemplate;\n\n  \n\nprivate RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> {\n\nMemDTO mem = new MemDTO();\n\nmem.setMemId(rs.getString(\"memId\"));\n\nmem.setMemPwd(rs.getString(\"memPwd\"));\n\nmem.setMemName(rs.getString(\"memName\"));\n\nmem.setCpId(rs.getInt(\"cpId\"));\n\nmem.setCompanyType(rs.getString(\"companyType\"));\n\nmem.setCompanyRegistrationNum(rs.getString(\"companyRegistrationNum\"));\n\nmem.setCompanyRepresentativeName(rs.getString(\"companyRepresentativeName\"));\n\nmem.setCompanyName(rs.getString(\"companyName\"));\n\nmem.setCompanyAddr(rs.getString(\"companyAddr\"));\n\nmem.companyBusinessRegistration(rs.getString(\"companyBusinessRegistration\")); // 이 필드 사용\n\nmem.setUserType(rs.getInt(\"userType\"));\n\nreturn mem;\n\n};\n```"},
		{"id":"6c8a83ec8cb68b11","x":3420,"y":-2780,"width":340,"height":60,"type":"text","text":"# MemServiceImpl"},
		{"id":"1a65f24c1edf15a4","x":4848,"y":-2404,"width":1392,"height":364,"type":"text","text":"`RowMapper` 인터페이스\n\n`private RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> { ... };`에서 `rs`와 `rowNum`은 `RowMapper` 인터페이스의 `mapRow` 메서드의 매개변수입니다.\n\n- `rs`는 데이터베이스 쿼리를 실행한 결과인 `ResultSet` 객체입니다.\n- `ResultSet` 객체는 데이터베이스로부터 가져온 데이터를 가지고 있으며, 특정 행(row)의 데이터에 접근할 수 있는 메서드들을 제공합니다.\n- `rs.getString(\"memId\")`, `rs.getInt(\"cpId\")` 등과 같이 `ResultSet` 객체의 메서드를 사용하여 각 열(column)의 값을 가져올 수 있습니다."},
		{"id":"43c62152aa9cd1b1","x":3940,"y":-2940,"width":680,"height":220,"type":"text","text":"## 도대체 이게 뭐지?\n- dto에서 해야될껄 왜 서비스에서 하고 있지??"}
	],
	"edges":[
		{"id":"dbe65268fcf3c488","fromNode":"c43dc24825c78d05","fromSide":"right","toNode":"71dc42c610125534","toSide":"left"},
		{"id":"4c7ccc1fc23dcf72","fromNode":"71dc42c610125534","fromSide":"right","toNode":"0f128f8dd6b42b11","toSide":"left"}
	]
}