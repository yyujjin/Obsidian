{
	"nodes":[
		{"id":"71dc42c610125534","type":"text","text":"```java\n@PostMapping(\"/login_yn\")\n\n\n//🙋‍♀️ 파라미터를 넘기는게 아니라 dto로 바로 매핑하게 하면 어떰?\n\npublic String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {\n\nlog.info(\"@# login_yn\"); \n\n\n//name과 value가 있는 것들이 파라미터로 넘어옴 => 로그인 타입(기업, 개인), 아이디, 비밀번호 \n\n//{loginType=individual, memId=user01, memPwd=1234}\n\n\n\n//📌컨트롤러와 서비스의 기능을 명확히 구분하는게 좋을 것같음\n\n//📌UserManagementService 로 서비스 생성해서 밑에 코드 넣기\n\n\n\n//로그인 타입을 확인해서\n//🤔여기서 로그인 타입을 굳이 왜 확인하는 거지 어차피 파라미터 넘길껀데\n\nString loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)\n\n//📌List로 변경하는게 좋을 듯\n//🙋‍♀️여기도 dto를 파라미터로 넘기는 거지\n//🤔근데 여기서 리스트를 반환 받을 게 없지않나? 그냥 아이디, 비번 맞는지 확인하는건데 유저 정보를 리스트로 저장하는 코드는 필요 없을 것 같음.\n//마이바티스 기능 이용해서 일치 유무만 확인하면 될 것 같음\n//단지 로그인체크해서 사용자 아이디만 받아올거면 리스트가 아닌 string으로 받아오면 될듯\nArrayList<MemDTO> user = service.loginYn(param);\n\n```","x":2160,"y":-1497,"width":880,"height":857},
		{"id":"88e684814e2ded2f","type":"text","text":"##  service.loginYn(param)","x":3420,"y":-1462,"width":394,"height":62},
		{"id":"77a8ef49ea8c550a","type":"text","text":"# MemServiceImpl","x":3420,"y":-1520,"width":300,"height":58},
		{"id":"1329e917a6a7676e","type":"text","text":"```java\n package com.jjobkorea.service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport org.apache.ibatis.session.SqlSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Service;\n\nimport com.jjobkorea.dto.MemDTO;\nimport com.jjobkorea.mapper.MemMapper;\nimport com.oracle.wls.shaded.org.apache.regexp.recompile;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\n@Service\npublic class MemServiceImpl implements MemService {\n   @Autowired\n   private SqlSession sqlSession;\n\n    @Override\n    public ArrayList<MemDTO> loginYn(HashMap<String, String> param) {\n        log.info(\"@# MemServiceImpl loginYn\");\n\n        MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n        \n        ArrayList<MemDTO> list = mapper.loginYn(param);\n\n        return list;\n    }\n\n    @Override\n    public void write(HashMap<String, String> param) {\n       MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n       \n       mapper.write(param);\n    }\n       \n\n    @Override\n    public ArrayList<MemDTO> selectByCpId(HashMap<String, String> param) {\n       MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n       \n       ArrayList<MemDTO> dto = mapper.selectByCpId(param);\n       \n       return dto;\n    }\n\n    @Override\n    public int checkCpRegistrationNum(HashMap<String, String> param) {\n       MemMapper mapper = sqlSession.getMapper(MemMapper.class);\n       \n       int dto = mapper.checkCpRegistrationNum(param);\n       \n       return dto; \n    }\n}\n \n```","x":15520,"y":5920,"width":1631,"height":1430},
		{"id":"b46289d3f737efc1","type":"text","text":"# 균호씨 ","x":15520,"y":5860,"width":250,"height":60},
		{"id":"0f128f8dd6b42b11","type":"text","text":"```java\n\n@Override\n//파라미터 넘어와서 \npublic ArrayList<MemDTO> loginYn(HashMap<String, String> param) {\n\n\n//🔥 이 코드 삭제하기\nString sql = \"SELECT tb.memId, tb.memPwd, tb.memName, tb.cpId, cp.companyType, cp.companyRegistrationNum, cp.companyRepresentativeName, cp.companyName, cp.companyAddr, cp.companyBusinessRegistration AS companyBusinessRegistration, tb.userType FROM signup_tb tb LEFT JOIN signup_cp cp ON tb.cpId = cp.id WHERE tb.memId = ?\";\n//📌매퍼 연결하는 코드 같은데 매퍼명 바꾸고 파라미터도 dto로 넘기기\nList<MemDTO> result = jdbcTemplate.query(sql, memRowMapper, param.get(\"memId\"));\n\n  \n\nreturn new ArrayList<>(result);\n\n}\n```","x":3420,"y":-1400,"width":3020,"height":527},
		{"id":"bf688592c2b48fc9","type":"text","text":"JDBC(Java Database Connectivity)를 사용하여 데이터베이스와 직접적으로 상호작용하는 방식으로 구현되어 있습니다. 여기서 JDBC는 `JdbcTemplate` 클래스를 통해 데이터베이스와의 연결을 관리하고, SQL 쿼리를 실행하여 결과를 가져오는 역할","x":5260,"y":-1687,"width":1072,"height":107},
		{"id":"87639ccd5e0e8c31","type":"text","text":"# 이 코드의 역할?\n- 매퍼를 부르지 않고 해당 서비스 코드에서 db 연결 다 해서 쿼리문 날리고 결과 받아오는 거 같음 ","x":3814,"y":-1600,"width":580,"height":200},
		{"id":"43c62152aa9cd1b1","type":"text","text":"## 도대체 이게 뭐지?\n- dto에서 해야될껄 왜 서비스에서 하고 있지??\n- 마이바티스로 가능 한걸 RowMapper 인터페이스 사용해서 수동으로 하고 있음 ","x":3967,"y":-3280,"width":680,"height":220},
		{"id":"6c8a83ec8cb68b11","type":"text","text":"# MemServiceImpl","x":3447,"y":-3120,"width":340,"height":60},
		{"id":"3e993d14296bbd08","type":"text","text":"```java\n\n//🔥 이 코드 삭제해야 할 것 같음 \n\n@Autowired\n\nprivate JdbcTemplate jdbcTemplate;\n\n  \n\nprivate RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> {\n\nMemDTO mem = new MemDTO();\n\nmem.setMemId(rs.getString(\"memId\"));\n\nmem.setMemPwd(rs.getString(\"memPwd\"));\n\nmem.setMemName(rs.getString(\"memName\"));\n\nmem.setCpId(rs.getInt(\"cpId\"));\n\nmem.setCompanyType(rs.getString(\"companyType\"));\n\nmem.setCompanyRegistrationNum(rs.getString(\"companyRegistrationNum\"));\n\nmem.setCompanyRepresentativeName(rs.getString(\"companyRepresentativeName\"));\n\nmem.setCompanyName(rs.getString(\"companyName\"));\n\nmem.setCompanyAddr(rs.getString(\"companyAddr\"));\n\nmem.companyBusinessRegistration(rs.getString(\"companyBusinessRegistration\")); // 이 필드 사용\n\nmem.setUserType(rs.getInt(\"userType\"));\n\nreturn mem;\n\n};\n```","x":3447,"y":-3060,"width":1312,"height":900},
		{"id":"1a65f24c1edf15a4","type":"text","text":"`RowMapper` 인터페이스\n\n`private RowMapper<MemDTO> memRowMapper = (rs, rowNum) -> { ... };`에서 `rs`와 `rowNum`은 `RowMapper` 인터페이스의 `mapRow` 메서드의 매개변수입니다.\n\n- `rs`는 데이터베이스 쿼리를 실행한 결과인 `ResultSet` 객체입니다.\n- `ResultSet` 객체는 데이터베이스로부터 가져온 데이터를 가지고 있으며, 특정 행(row)의 데이터에 접근할 수 있는 메서드들을 제공합니다.\n- `rs.getString(\"memId\")`, `rs.getInt(\"cpId\")` 등과 같이 `ResultSet` 객체의 메서드를 사용하여 각 열(column)의 값을 가져올 수 있습니다.\n\n\n\n`RowMapper`는 개발자가 직접 구현해야 하는 인터페이스입니다.\n개발자는 `ResultSet`에서 데이터를 읽어와서 객체의 필드에 수동으로 설정해야 합니다.","x":5160,"y":-2789,"width":1392,"height":284},
		{"id":"49c6403f319aac62","type":"text","text":"# Refactory 제안 \n- checkUser 메서드 생성해서 아이디, 비번만 넘겨서\n- 불일치하면 핸들링하는 코드 쓰고\n- 일치하면 아이디만 가져오는 코드작성","x":3920,"y":-754,"width":359,"height":308},
		{"id":"3c962943a9740d7c","type":"text","text":"# 개선해야 할 사항\n- 빈 필드 주입 말고 생성자 주입으로 \n- 메서드 명, 변수 명 수정","x":-6080,"y":-1750,"width":459,"height":280},
		{"id":"dda97059d4fd693a","type":"text","text":"# 회원관리\n- 기업\n- 개인이랑 enum 생성하고\n- 유저 관리 서비스 만들고\n- dto를 유저, 기업 따로 만들고\n- 그 안에서  타입 구분해서 해당 dto 실행하는 식으로 \n- ","x":3920,"y":-446,"width":520,"height":266},
		{"id":"e7e3abf1f3b04cb2","type":"text","text":"## @PostMapping(\"/login_yn\")","x":2160,"y":-1563,"width":394,"height":72},
		{"id":"2db17c65067637ca","type":"text","text":"# MemController","x":2160,"y":-1620,"width":297,"height":57},
		{"id":"8c7cc097fcb066d1","type":"text","text":"# login.jsp","x":-120,"y":-1651,"width":250,"height":60},
		{"id":"c43dc24825c78d05","type":"text","text":"```java\n<!--개인-->\n\n<form id=\"individualForm\" method=\"post\" action=\"/login_yn\">\n\n<input type=\"hidden\" name=\"loginType\" value=\"individual\">\n\n<div class=\"input-container\">\n\n<input type=\"text\" name=\"memId\" placeholder=\"아이디\" required>\n\n</div>\n\n<div class=\"input-container\">\n\n<input type=\"password\" name=\"memPwd\" placeholder=\"비밀번호\" required>\n\n</div>\n\n<button type=\"submit\">로그인</button>\n\n<span class=\"register-link\" data-type=\"individual\">회원가입</span>\n\n</form>\n\n\n<!--기업-->\n\n<form id=\"companyForm\" method=\"post\" action=\"/login_yn\" style=\"display: none;\">\n\n<input type=\"hidden\" name=\"loginType\" value=\"enterprise\">\n\n<div class=\"input-container\">\n\n<input type=\"text\" name=\"memId\" placeholder=\"기업회원아이디\" required>\n\n</div>\n\n<div class=\"input-container\">\n\n<input type=\"password\" name=\"memPwd\" placeholder=\"비밀번호\" required>\n\n</div>\n\n<button type=\"submit\">로그인</button>\n\n<span class=\"register-link\" data-type=\"enterprise\">회원가입</span>\n\n</form>\n```","x":-120,"y":-1591,"width":1140,"height":1080},
		{"id":"f125be6adfc80906","type":"text","text":"## 로그인 페이지","x":130,"y":-1641,"width":276,"height":50},
		{"id":"8fc3aa15e94bf142","type":"text","text":"### 폼 작성하고 버튼 누르면 실행됨 ","x":1340,"y":-1078,"width":489,"height":50},
		{"id":"0ea6e9ebad193499","type":"text","text":"```java\nconst urlParams = new URLSearchParams(window.location.search);\n\n\n//만약 파라미터에 error를 가지고 있으면 알림창 띄워라.\nif (urlParams.has('error')) {\n\nalert('아이디 또는 비밀번호가 일치하지 않습니다. 다시 확인 후 입력해주시기 바랍니다.');\n\n}\n```","x":3420,"y":200,"width":935,"height":255},
		{"id":"850cdead01562c3a","type":"text","text":"# login.jsp (script 부분)","x":3420,"y":131,"width":385,"height":69},
		{"id":"1b6a4bd66b807b37","type":"text","text":"#### URLSearchParams\n\nhttps://jake-seo-dev.tistory.com/159\n\n```javaScript\nconst params = new URLSearchParams(\"foo=1&bar=2\");\nconsole.log(params.get(\"foo\")); // 1\nconsole.log(params.get(\"bar\")); // 2\n```\n\n","x":4600,"y":200,"width":560,"height":255},
		{"id":"5ee8548fa4e38cee","type":"text","text":"```java\nif (user.isEmpty()) {\n\n\n//만약 받아온 데이터가 없으면  로그인 페이지로 리다이렉트 \nreturn \"redirect:login?error=true\";\n\n}\n```","x":2300,"y":218,"width":625,"height":220},
		{"id":"0b595fb8c1a6f68b","type":"text","text":"```java\n//🔥코드 삭제해야 할 듯 \n//🤔이 코드가 필요한 이유는 기업이랑 유저가 같은 디비를 쓰니까 아이디 중복 사용을 가능하게 했을 경우 둘을 구분하기 위해 사용한건가 \n//아닌데 중복사용 막아놨는데?\n//이 코드는 필요가없는게 아이디 중복을 막았으면 저장돼 있는 유저 타입이 가져올 거란 말이지. 굳이 필요가 있는 코드라고 생각되지 않음 \nif ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {\n\nlog.info(\"로그인 유형이 일치하지 않습니다.\");\n\nreturn \"redirect:login?error=true\";\n\n}\n```","x":1950,"y":1080,"width":1326,"height":241},
		{"id":"227af17cd18a14e3","type":"text","text":"데이터 list로  받아와서 넘기기   ","x":3320,"y":-660,"width":322,"height":60},
		{"id":"c28dc3f526e0120f","type":"text","text":"`jdbcTemplate.query()` 메서드에서 `-1`이 넘어오는 경우는 일반적으로 쿼리 실행 결과가 없을 때","x":3475,"y":1171,"width":880,"height":60},
		{"id":"7a97504012650e99","type":"text","text":"# Refactory 제안\n\n유저, 기업 테이블 분리 생성","x":1950,"y":981,"width":381,"height":99},
		{"id":"f0d60c2c64cb852e","type":"text","text":"- 1 => 기업\n- -1 => 유저","x":2331,"y":1020,"width":250,"height":60},
		{"id":"878edb11d0ab4b0e","type":"file","file":"Pasted image 20240724171912.png","x":3149,"y":1080,"width":127,"height":127},
		{"id":"a42d7db7c7aa60b1","type":"file","file":"Pasted image 20240724171912.png","x":4632,"y":-3060,"width":127,"height":127},
		{"id":"1474c7992bfc7c69","type":"text","text":"```java\n//🔥 코드 삭제하기\n//아이디가 틀리든 비밀번호가 틀리든 뭐가 틀렸다는걸 알려주면 해커가 접근하기 쉬움\n//그냥 다시 로그인하라는 알림창 띄우면 될 듯 \n// 입력된 비밀번호가 데이터베이스에 저장된 비밀번호와 일치하는지 확인\n\nif (!foundUser.getMemPwd().equals(param.get(\"memPwd\"))) {\n\nlog.info(\"비밀번호가 일치하지 않습니다.\");\n\nreturn \"redirect:login?error=true\";\n\n}\n```","x":2172,"y":1560,"width":888,"height":320},
		{"id":"95deb3e69c07d39e","type":"text","text":"```java\n//어차피 리스트 하나밖에 안가져오는데 굳이 user.get(0)할 필요 없는듯 \n//user로도 똑같은 결과 나옴 \nMemDTO foundUser = user.get(0);\n```","x":2277,"y":580,"width":672,"height":140},
		{"id":"38e8a7a1d78c1ab4","type":"text","text":"# Refactory\n\n- 타입 체크 서비스 만들고\n- 유저 비번, 아이디 서비스 만들기 ","x":3213,"y":1647,"width":529,"height":147},
		{"id":"6bae2bda89a75e2d","type":"text","text":"# @RequestMapping(\"/main\") ","x":2172,"y":2774,"width":475,"height":76},
		{"id":"555b7a6f99f073c7","type":"text","text":"## 코드 기능 : 사용자 세션 확인 ","x":2172,"y":2850,"width":421,"height":60},
		{"id":"a4a32bd66a730d4f","type":"text","text":"```java\n@RequestMapping(\"/main\")  \npublic String main(HttpSession session, Model model) {  \n    log.info(\"@# main\");  \n    //main페이지에 진입 할 때 세션이 있으면 가져오고 없으면 생성\n    //근데 세션에 dto를 다 저장해버리네 (맞나? 내일 알아보기)\n    MemDTO user = (MemDTO) session.getAttribute(\"user\");  \n    //해당 유저 아이디의 세션이 있다면 \n    if (user != null) {  \n\t    //헤더 부분에 표시되는 부분인데 어짜피 헤더가 main.jsp에 속해 있으니 \n\t    //main/main으로 보내는 거임 \n        model.addAttribute(\"memName\", user.getMemName());  \n    }  \n    return \"main/main\";  \n}\n```","x":2172,"y":2910,"width":865,"height":400},
		{"id":"eee420a4c00c7991","type":"text","text":"현재 모든 페이지 요청 경로는 같은 컨트롤러로 연결되어 있음 \n그래서 세션 확인 코드를 각 페이지마다 넣는게 아니라 한번만 넣어도 됨 \n만약 중앙집중화로 짜지 않았더라면 각 페이지에서 세션 확인하는 코드를 실행해야함","x":3037,"y":2962,"width":690,"height":125},
		{"id":"6b0302c2a71d1ea0","type":"text","text":"### 이런식으로 ","x":3930,"y":3027,"width":250,"height":60},
		{"id":"96121bb8d057cb45","type":"text","text":"♻️ 세션을 핸들링 하는 서비스 따로 빼기\n- 로그인 성공하면 세션 서비스 호출해서 세션 생성하고\n- 메인 컨트롤러에 세션 서비스 호출해서 세션 확인","x":3037,"y":3169,"width":556,"height":141},
		{"id":"c695e34556270b3b","type":"text","text":"### Refactory\n공통적인 세션 확인은 기본 컨트롤러에서 처리하기","x":2933,"y":2710,"width":631,"height":102},
		{"id":"33d943f622c17dd0","type":"text","text":"```java\n@GetMapping(\"requestPage/{page}\")\npublic String requestPage(@PathVariable(\"page\") String page, Model model, JobseekerCriteria cri, HttpServletRequest request) {\n    log.info(\"요청 페이지 -> \" + page);\n\n    HttpSession session = request.getSession(false); // 기존 세션만 가져오기, 새 세션 생성하지 않음\n\n    // 세션 확인 및 리다이렉트 처리\n    if (session == null || session.getAttribute(\"user\") == null) {\n        if (!page.equals(\"login\")) {\n            return \"redirect:/login\"; // 로그인 페이지로 리다이렉트\n        }\n    }\n\n\n    // 세션이 유효한 경우\n    //상단에 유저 이름 표시하는 코드 추가하고\n    switch (page) {\n        case \"main\":\n            return enterMainContent(model);\n        case \"login\":\n            return memController.login(model);\n        case \"register\":\n            return memController.register(model);\n        case \"jobPosting\":\n            return jobPostingController.enterJobPosting(request, model);\n        case \"jobseekerBoard\":\n            return jobseekerPageController.listWithPaging(cri, model);\n        case \"resume\":\n            return resumeController.resister(model, session);\n        case \"jobPostingResister\":\n            return addJobPostingController.showAddJobPostingForm(model, session);\n        case \"jobseekerWrite_view\":\n            return \"jobseekerWrite_view\"; // 로그인 확인은 이미 중앙에서 처리됨\n        case \"logout\":\n            session.invalidate(); // 세션 무효화\n            return \"redirect:/login\";\n    }\n\n    return \"main/main\";\n}\n\n```","x":4441,"y":2575,"width":1146,"height":1019},
		{"id":"2765d085923347e8","type":"text","text":"```java\n// 세션에 사용자 정보 저장\n\nHttpSession session = request.getSession();\n\nsession.setAttribute(\"user\", foundUser);\n\nlog.info(\"사용자 세션 저장 완료: \" + foundUser.getMemId());\n\nreturn \"redirect:main\";\n```","x":2183,"y":2120,"width":867,"height":277},
		{"id":"cc0f4dc6bc9d966b","type":"text","text":"### 메인 컨트롤러 리팩토링 하기\npage값도 그냥 파라미터로 넘겨버려서 \nmodel.attribute(page)이런식으로  페이지 값 바로 생성하기 ","x":5940,"y":3085,"width":534,"height":175},
		{"id":"2e746a39a9927011","type":"text","text":"어차피 main/main으로 연결이 다 되는거니까 유저이름 상단에 표시하는 코드 한번만 추가  하면 됨. ","x":5940,"y":2900,"width":476,"height":78},
		{"id":"f2aefc70f46a947b","type":"text","text":"# @RequestMapping(\"/login_ok\")","x":2122,"y":3680,"width":523,"height":89},
		{"id":"48640f2484db0aa8","type":"text","text":"```java\n//해당 엔드포인트를 사용하는 페이지가 없는걸로 추정됨\n//로그 안찍힘, 사용 안됨\n@RequestMapping(\"/login_ok\")\n\n//🔥이 코드는 삭제되어야 할 것 같음\n//기능 중복, 실제로 사용 안되고 있음\npublic String login_ok(HttpSession session, Model model) {\n\nlog.info(\"@# login_ok\");\n\nMemDTO user = (MemDTO) session.getAttribute(\"user\");\n\nif (user != null) {\n\nmodel.addAttribute(\"memName\", user.getMemName());\n\n}\n//해당 jsp 파일도 사용안하는 걸로 추정 \nreturn \"login_ok\";\n\n}\n```","x":2122,"y":3769,"width":975,"height":565},
		{"id":"6eeca4fd7007828e","type":"text","text":"# @PostMapping(\"/checkId\")","x":2160,"y":6635,"width":445,"height":70},
		{"id":"451e13bdb6133c71","type":"text","text":"```java\n@PostMapping(\"/checkId\")\n\n@ResponseBody\n\npublic Map<String, Boolean> checkId(@RequestParam(\"memId\") String memId) {\n\nMap<String, Boolean> response = new HashMap<>();\n\nresponse.put(\"exists\", signupService.isMemIdExists(memId));\n\nreturn response;\n\n}\n```","x":2160,"y":6705,"width":809,"height":400},
		{"id":"a11056634ac7cbc0","type":"text","text":"아이디 중복 체크","x":3300,"y":6875,"width":250,"height":60},
		{"id":"1ebb766c212845b4","type":"text","text":"# @RequestMapping(\"/register\")","x":2160,"y":7701,"width":500,"height":80},
		{"id":"c51cbbb10fc28d57","type":"text","text":"```java\n//회원 가입 창 로드 엔드포인트 \n@RequestMapping(\"/register\")\n\npublic String register(Model model) {\n\nlog.info(\"@# register\");\n\n  \n\nString page = \"MemLogin/register\";\n\nmodel.addAttribute(\"page\", page);\n\n  \n\nreturn \"main/main\";\n\n}\n``` ","x":2160,"y":7781,"width":871,"height":480},
		{"id":"f11b289f9aa57f94","type":"text","text":"# register.jsp","x":3960,"y":6341,"width":250,"height":60},
		{"id":"353ef0387b6eb273","type":"text","text":"## 회원 가입 페이지","x":4210,"y":6341,"width":270,"height":60},
		{"id":"78b711e0b46d10f1","type":"text","text":"```javascript\nconsole.log(\"JQuery Loaded\");\n\n$('#memId, #enterpriseMemId').on('blur', function() {\n\nvar memId = $(this).val();\n\nconsole.log(\"memId:\", memId);\n\nif (memId) {\n\n$.ajax({\n\ntype: 'POST',\n\nurl: '/checkId',\n\ndata: { memId: memId },\n\nsuccess: function(response) {\n\nconsole.log(\"AJAX Response:\", response);\n\nif (response.exists) {\n\nalert('이미 존재하는 아이디입니다.'); // 메시지 창 띄우기\n\n$(this).val(''); // 입력 필드 초기화 (선택 사항)\n\n}\n\n},\n\nerror: function(xhr, status, error) {\n\nconsole.error(\"AJAX Error:\", status, error);\n\n}\n\n});\n\n}\n\n});\n```","x":3960,"y":6401,"width":1278,"height":1008},
		{"id":"73cf8cde6620ea6d","type":"text","text":"# @PostMapping(\"/registerOk\")","x":2160,"y":8741,"width":526,"height":77},
		{"id":"90ad7a100f6dbde8","type":"text","text":"###  이 코드는 ajax으로 해결해야 할 코드 같다.  전체 삭제","x":2686,"y":8755,"width":679,"height":63},
		{"id":"f7f6507539210a2d","type":"text","text":"```java\n@PostMapping(\"/registerOk\")\n\npublic String registerOk(@RequestParam Map<String, String> params, Model model) {\n\nlog.info(\"Received parameters: \" + params);\n\n  \n\nlog.info(\"memAddr: \" + params.get(\"memAddr\"));\n\n  \n\nif (params.get(\"memAddr\") == null || params.get(\"memAddr\").isEmpty()) {\n\nlog.error(\"회원 주소가 누락되었습니다.\");\n\nmodel.addAttribute(\"error\", \"회원 주소가 누락되었습니다.\");\n\nreturn \"MemLogin/register\";\n\n}\n\n  \n\nif (\"individual\".equals(params.get(\"type\"))) {\n\nif (params.get(\"memBirth\") == null || params.get(\"memBirth\").isEmpty()) {\n\nlog.error(\"회원 생년월일이 누락되었습니다.\");\n\nmodel.addAttribute(\"error\", \"회원 생년월일이 누락되었습니다.\");\n\nreturn \"MemLogin/register\";\n\n}\n\nif (params.get(\"memGender\") == null || params.get(\"memGender\").isEmpty()) {\n\nlog.error(\"회원 성별이 누락되었습니다.\");\n\nmodel.addAttribute(\"error\", \"회원 성별이 누락되었습니다.\");\n\nreturn \"MemLogin/register\";\n\n}\n\n}\n\n\n\n} \n```","x":2160,"y":8818,"width":1531,"height":1203},
		{"id":"668ff4468d6db718","type":"file","file":"Pasted image 20240724171912.png","x":3564,"y":8818,"width":127,"height":127},
		{"id":"c28a5b2c82fd3df3","type":"text","text":"```java\ntry {\n\n// 중복된 ID 확인을 또 하고 있음\n\nif (signupService.isMemIdExists(params.get(\"memId\"))) {\n\nlog.error(\"이미 존재하는 아이디입니다.\");\n\nmodel.addAttribute(\"error\", \"이미 존재하는 아이디입니다.\");\n\nreturn \"MemLogin/register\";\n\n}\n\n```","x":2405,"y":10341,"width":1042,"height":379},
		{"id":"d93c7c71521f1341","x":2383,"y":6341,"width":304,"height":60,"color":"1","type":"text","text":"# 회원가입 기능 "},
		{"id":"5af71fe9ffb56172","x":2457,"y":-1880,"width":250,"height":60,"color":"3","type":"text","text":"# 로그인 기능"},
		{"id":"fc1c56b637322b37","type":"text","text":"# @RequestMapping(\"/logout\")","x":2240,"y":11760,"width":481,"height":71},
		{"id":"a07d80c72d6b5bc9","type":"text","text":"```java\n//로그아웃 버튼 누르면 세션 무효화시키고 로그인 페이지로 리디렉션\n@RequestMapping(\"/logout\")\n\npublic String logout(HttpSession session) {\n\nlog.info(\"@# logout\");\n\nsession.invalidate(); // 세션 무효화\n\nreturn \"redirect:main\"; // 로그인 페이지로 리디렉션\n\n}\n```","x":2240,"y":11831,"width":785,"height":324},
		{"id":"bfd857183d0c795e","type":"file","file":"Pasted image 20240724171912.png","x":3320,"y":10341,"width":127,"height":127},
		{"id":"efb0177658fd505c","x":2457,"y":11040,"width":938,"height":152,"type":"text","text":"```java\nsignupService.registerEnterprise(params);\n\nreturn \"MemLogin/registerOk\";\n```"},
		{"id":"c877ab588eb9c886","x":4560,"y":11059,"width":2287,"height":2214,"type":"text","text":"```java\n@Transactional\n\npublic void registerEnterprise(Map<String, String> params) {\n\n// 파라미터 로그 출력\n\nlog.info(\"Received parameters: \" + params);\n\n  \n\n\n//이건 프론트단에서 해야된다고 생각\nif (isMemIdExists(params.get(\"memId\"))) {\n\nthrow new IllegalArgumentException(\"이미 존재하는 아이디입니다.\");\n\n}\n\n  \n\nif (\"enterprise\".equals(params.get(\"type\"))) {\n\n// 기업 정보 삽입\n\nString cpSql = \"INSERT INTO signup_cp (companyType, companyRegistrationNum, companyName, companyRepresentativeName, companyAddr, companyBusinessRegistration) VALUES (?, ?, ?, ?, ?, ?)\";\n\njdbcTemplate.update(cpSql, params.get(\"companyType\"), params.get(\"companyRegistrationNum\"), params.get(\"companyName\"), params.get(\"companyRepresentativeName\"), params.get(\"companyAddr\"), params.get(\"companyBusinessRegistration\"));\n\n  \n\n// 삽입된 기업 ID 가져오기\n\nInteger cpId = jdbcTemplate.queryForObject(\"SELECT LAST_INSERT_ID()\", Integer.class);\n\n  \n\n// 기업회원 정보 삽입\n\nString memSql = \"INSERT INTO signup_tb (memId, memPwd, memName, memPhone, memAddr, memEmail, memCreationDate, cpId, userType) VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, 1)\";\n\njdbcTemplate.update(memSql,\n\nparams.get(\"memId\"),\n\nparams.get(\"memPwd\"),\n\nparams.get(\"memName\"),\n\nparams.get(\"memPhone\"),\n\nparams.get(\"memAddr\"),\n\nparams.get(\"memEmail\"),\n\ncpId\n\n);\n\n} else {\n\n// 개인회원 정보 삽입 전 memAddr 값 체크\n\nif (params.get(\"memAddr\") == null || params.get(\"memAddr\").isEmpty()) {\n\nthrow new IllegalArgumentException(\"회원 주소가 누락되었습니다.\");\n\n}\n\n  \n\n// 개인회원 정보 삽입\n\nString memSql = \"INSERT INTO signup_tb (memId, memPwd, memName, memPhone, memAddr, memEmail, memBirth, memGender, memCreationDate, userType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, -1)\";\n\njdbcTemplate.update(memSql,\n\nparams.get(\"memId\"),\n\nparams.get(\"memPwd\"),\n\nparams.get(\"memName\"),\n\nparams.get(\"memPhone\"),\n\nparams.get(\"memAddr\"),\n\nparams.get(\"memEmail\"),\n\nparams.get(\"memBirth\"),\n\nparams.get(\"memGender\")\n\n);\n\n}\n\n}\n```"},
		{"id":"a40462c5f795f6ae","x":4560,"y":10983,"width":403,"height":76,"type":"text","text":"# MemSignupService"},
		{"id":"7989fbba727b7604","x":5520,"y":10531,"width":1008,"height":208,"type":"text","text":"## @Transactional 어노테이션\n\n@Transactional은 클래스나 메서드에 붙여줄 경우, 해당 범위 내 메서드가 트랜잭션이 되도록 보장해준다.\n\n**선언적 트랜잭션**이라고도 하는데, 직접 객체를 만들 필요 없이 선언만으로도 관리를 용이하게 해주기 때문.\n\nhttps://kafcamus.tistory.com/30"},
		{"id":"41b21b18e55a7aba","x":3800,"y":11034,"width":250,"height":50,"type":"text","text":"회원 가입 form이 전달됨"},
		{"id":"98c0d42f6da43a35","x":6471,"y":13360,"width":709,"height":440,"type":"text","text":"# MemDTO 사용이 안되고 있음 "}
	],
	"edges":[
		{"id":"dbe65268fcf3c488","fromNode":"c43dc24825c78d05","fromSide":"right","toNode":"71dc42c610125534","toSide":"left"},
		{"id":"4c7ccc1fc23dcf72","fromNode":"71dc42c610125534","fromSide":"right","toNode":"0f128f8dd6b42b11","toSide":"left"},
		{"id":"c74490ab402f17e4","fromNode":"3e993d14296bbd08","fromSide":"right","toNode":"1a65f24c1edf15a4","toSide":"left"},
		{"id":"a24b3ffb69d878f5","fromNode":"0f128f8dd6b42b11","fromSide":"top","toNode":"bf688592c2b48fc9","toSide":"bottom"},
		{"id":"df86564bb9d914fd","fromNode":"0f128f8dd6b42b11","fromSide":"bottom","toNode":"71dc42c610125534","toSide":"bottom"},
		{"id":"22ceb27edc44182a","fromNode":"3e993d14296bbd08","fromSide":"bottom","toNode":"0f128f8dd6b42b11","toSide":"top"},
		{"id":"7c23f8b0550e12bf","fromNode":"71dc42c610125534","fromSide":"bottom","toNode":"5ee8548fa4e38cee","toSide":"top"},
		{"id":"499bd62cc29988f1","fromNode":"5ee8548fa4e38cee","fromSide":"right","toNode":"0ea6e9ebad193499","toSide":"left"},
		{"id":"d93539a3ad270db0","fromNode":"0ea6e9ebad193499","fromSide":"right","toNode":"1b6a4bd66b807b37","toSide":"left"},
		{"id":"e259fdc495e90f93","fromNode":"5ee8548fa4e38cee","fromSide":"bottom","toNode":"95deb3e69c07d39e","toSide":"top"},
		{"id":"44bcefe65dcbf735","fromNode":"95deb3e69c07d39e","fromSide":"bottom","toNode":"0b595fb8c1a6f68b","toSide":"top"},
		{"id":"5215cdb0ebd4d1b3","fromNode":"0b595fb8c1a6f68b","fromSide":"right","toNode":"c28dc3f526e0120f","toSide":"left"},
		{"id":"2f540c57f27aa111","fromNode":"0b595fb8c1a6f68b","fromSide":"bottom","toNode":"1474c7992bfc7c69","toSide":"top"},
		{"id":"07a52fee59c5c0a8","fromNode":"1474c7992bfc7c69","fromSide":"right","toNode":"38e8a7a1d78c1ab4","toSide":"left"},
		{"id":"d6af935d2ce5ba3b","fromNode":"eee420a4c00c7991","fromSide":"right","toNode":"33d943f622c17dd0","toSide":"left"},
		{"id":"80aff45602118435","fromNode":"33d943f622c17dd0","fromSide":"right","toNode":"cc0f4dc6bc9d966b","toSide":"left"},
		{"id":"e548890081cbb28f","fromNode":"33d943f622c17dd0","fromSide":"right","toNode":"2e746a39a9927011","toSide":"left"},
		{"id":"f93169f3e7f6c568","fromNode":"1474c7992bfc7c69","fromSide":"bottom","toNode":"2765d085923347e8","toSide":"top"},
		{"id":"c094846b6a441030","fromNode":"451e13bdb6133c71","fromSide":"right","toNode":"78b711e0b46d10f1","toSide":"left"},
		{"id":"aa8c46f477004dbf","fromNode":"f7f6507539210a2d","fromSide":"bottom","toNode":"c28a5b2c82fd3df3","toSide":"top"},
		{"id":"16c1a4df904ce08e","fromNode":"c28a5b2c82fd3df3","fromSide":"bottom","toNode":"efb0177658fd505c","toSide":"top"},
		{"id":"6497ec507b3b80c4","fromNode":"c877ab588eb9c886","fromSide":"top","toNode":"7989fbba727b7604","toSide":"bottom"},
		{"id":"72fc91a6bb58d59b","fromNode":"efb0177658fd505c","fromSide":"right","toNode":"a40462c5f795f6ae","toSide":"left"}
	]
}