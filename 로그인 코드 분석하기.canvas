{
	"nodes":[
		{"id":"45b3607348ccb3ef","x":-229,"y":-257,"width":1269,"height":1357,"type":"text","text":"```java\npackage com.jjobkorea.controller;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.jjobkorea.dto.MemDTO;\nimport com.jjobkorea.service.MemService;\nimport com.jjobkorea.service.MemSignupService;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpSession;\nimport lombok.extern.slf4j.Slf4j;\n\n@Controller\n@Slf4j\npublic class MemController {\n    @Autowired\n    private MemService service;\n    @Autowired\n    private MemSignupService signupService;\n\n    @RequestMapping(\"/login\")\n    public String login(Model model) {\n        log.info(\"@# login\");\n\n        String page = \"MemLogin/login\";\n        model.addAttribute(\"page\", page);\n\n        return \"main/main\";\n    }\n\n    @PostMapping(\"/login_yn\")\n    public String login_yn(@RequestParam HashMap<String, String> param, HttpServletRequest request, Model model) {\n        log.info(\"@# login_yn\");\n        String loginType = param.get(\"loginType\"); // 사용자 유형(개인/기업)\n        ArrayList<MemDTO> user = service.loginYn(param);\n\n        if (user.isEmpty()) {\n            log.info(\"사용자를 찾을 수 없습니다.\");\n            return \"redirect:login?error=true\";\n        }\n\n        MemDTO foundUser = user.get(0);\n\n        // 사용자 유형이 일치하는지 확인\n        if ((loginType.equals(\"individual\") && foundUser.getUserType() != -1) || (loginType.equals(\"enterprise\") && foundUser.getUserType() != 1)) {\n            log.info(\"로그인 유형이 일치하지 않습니다.\");\n            return \"redirect:login?error=true\";\n        }\n\n        // 입력된 비밀번호가 데이터베이스에 저장된 비밀번호와 일치하는지 확인\n        if (!foundUser.getMemPwd().equals(param.get(\"memPwd\"))) {\n            log.info(\"비밀번호가 일치하지 않습니다.\");\n            return \"redirect:login?error=true\";\n        }\n\n        // 세션에 사용자 정보 저장\n        HttpSession session = request.getSession();\n        session.setAttribute(\"user\", foundUser);\n        log.info(\"사용자 세션 저장 완료: \" + foundUser.getMemId());\n        return \"redirect:main\";\n    }\n\n    @RequestMapping(\"/main\")\n    public String main(HttpSession session, Model model) {\n        log.info(\"@# main\");\n        MemDTO user = (MemDTO) session.getAttribute(\"user\");\n        if (user != null) {\n            model.addAttribute(\"memName\", user.getMemName());\n        }\n        return \"main/main\";\n    }\n\n    @RequestMapping(\"/login_ok\")\n    public String login_ok(HttpSession session, Model model) {\n        log.info(\"@# login_ok\");\n        MemDTO user = (MemDTO) session.getAttribute(\"user\");\n        if (user != null) {\n            model.addAttribute(\"memName\", user.getMemName());\n        }\n        return \"login_ok\";\n    }\n\n    @PostMapping(\"/checkId\")\n    @ResponseBody\n    public Map<String, Boolean> checkId(@RequestParam(\"memId\") String memId) {\n        Map<String, Boolean> response = new HashMap<>();\n        response.put(\"exists\", signupService.isMemIdExists(memId));\n        return response;\n    }\n\n    @RequestMapping(\"/register\")\n    public String register(Model model) {\n        log.info(\"@# register\");\n\n        String page = \"MemLogin/register\";\n        model.addAttribute(\"page\", page);\n\n        return \"main/main\";\n    }\n\n    @PostMapping(\"/registerOk\")\n    public String registerOk(@RequestParam Map<String, String> params, Model model) {\n        log.info(\"Received parameters: \" + params);\n\n        log.info(\"memAddr: \" + params.get(\"memAddr\"));\n\n        if (params.get(\"memAddr\") == null || params.get(\"memAddr\").isEmpty()) {\n            log.error(\"회원 주소가 누락되었습니다.\");\n            model.addAttribute(\"error\", \"회원 주소가 누락되었습니다.\");\n            return \"MemLogin/register\";\n        }\n\n        if (\"individual\".equals(params.get(\"type\"))) {\n            if (params.get(\"memBirth\") == null || params.get(\"memBirth\").isEmpty()) {\n                log.error(\"회원 생년월일이 누락되었습니다.\");\n                model.addAttribute(\"error\", \"회원 생년월일이 누락되었습니다.\");\n                return \"MemLogin/register\";\n            }\n            if (params.get(\"memGender\") == null || params.get(\"memGender\").isEmpty()) {\n                log.error(\"회원 성별이 누락되었습니다.\");\n                model.addAttribute(\"error\", \"회원 성별이 누락되었습니다.\");\n                return \"MemLogin/register\";\n            }\n        }\n\n        try {\n            // 중복된 ID 확인\n            if (signupService.isMemIdExists(params.get(\"memId\"))) {\n                log.error(\"이미 존재하는 아이디입니다.\");\n                model.addAttribute(\"error\", \"이미 존재하는 아이디입니다.\");\n                return \"MemLogin/register\";\n            }\n\n            signupService.registerEnterprise(params);\n            return \"MemLogin/registerOk\";\n        } catch (IllegalArgumentException e) {\n            log.error(\"회원가입 중 오류 발생: \" + e.getMessage());\n            model.addAttribute(\"error\", e.getMessage());\n            return \"MemLogin/register\";\n        }\n    }\n\n    @RequestMapping(\"/logout\")\n    public String logout(HttpSession session) {\n        log.info(\"@# logout\");\n        session.invalidate();  // 세션 무효화\n        return \"redirect:main\";  // 로그인 페이지로 리디렉션\n    }\n}\n```"},
		{"id":"9eae64e687000821","x":80,"y":-754,"width":250,"height":60,"type":"text","text":"# "}
	],
	"edges":[]
}