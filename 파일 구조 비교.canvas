{
	"nodes":[
		{"id":"1eb66af354482877","type":"text","text":"# MAPPER가 추가되면 ","x":-4840,"y":1720,"width":365,"height":73},
		{"id":"b414fe8f20e1a0e4","type":"file","file":"Pasted image 20240701104746.png","x":-4839,"y":1840,"width":399,"height":79},
		{"id":"560d552766c0de80","type":"file","file":"Pasted image 20240701104820.png","x":-4240,"y":1831,"width":399,"height":88},
		{"id":"fe17958eb562ca66","type":"text","text":"# 각 MAPPER마다XML 파일 만들고 ","x":-4296,"y":1720,"width":513,"height":57},
		{"id":"4e901332524f9d15","type":"text","text":"##  근데 학원이랑 차이점이 뭐냐면\n\n- 학원은  resources패키지에\n\t- 설정 파일을 만들어\n\n-  하지만 나는 java 패키지에 \n\t- 설정 패키지를 하나 만들고\n\t\t- 그 밑에 클래스로 설정파일을 만들어     ","x":-2440,"y":1364,"width":469,"height":240},
		{"id":"eb48149962076dca","type":"text","text":"# 설정파일에 알려주는 거야","x":-3651,"y":1148,"width":429,"height":62},
		{"id":"c107cff926db5ee5","type":"file","file":"Pasted image 20240701104704.png","x":-3622,"y":1309,"width":399,"height":60},
		{"id":"a4b713dd6b177361","type":"file","file":"Pasted image 20240701110540.png","x":-3622,"y":1369,"width":480,"height":193},
		{"id":"abd7d8408864b134","type":"text","text":"# 각 MAPPER마다XML 파일 만들고 ","x":-4278,"y":1148,"width":513,"height":57},
		{"id":"d6330e68ddcf5bc8","type":"file","file":"Pasted image 20240701104618.png","x":-4222,"y":1249,"width":400,"height":179},
		{"id":"25bba6b1d5344bb1","type":"file","file":"Pasted image 20240701104553.png","x":-4822,"y":1268,"width":400,"height":140},
		{"id":"becfb08e2e4d2e0f","type":"text","text":"# MAPPER가 추가되면 ","x":-4804,"y":1148,"width":365,"height":73},
		{"id":"57efcd4375083210","type":"text","text":"# 설정파일에 알려주는 거야","x":-3640,"y":1720,"width":429,"height":62},
		{"id":"2486b38fb964b803","type":"file","file":"Pasted image 20240701110133.png","x":-3611,"y":1831,"width":400,"height":78},
		{"id":"235caa7d24a963e4","type":"file","file":"Pasted image 20240701110053.png","x":-3611,"y":1919,"width":558,"height":221},
		{"id":"eee79fee2471d974","type":"text","text":"### 나는 한 줄로 해결했어\n이 경로에 있는 xml 파일을 다 인식해\n","x":-2475,"y":1680,"width":540,"height":100},
		{"id":"09c8cdc13c995f7c","type":"file","file":"Pasted image 20240701110917.png","x":-2985,"y":1780,"width":1561,"height":50},
		{"id":"47aae7cedfe7db19","type":"text","text":"### 근데 학원은 다 알려주는거지","x":-2475,"y":1900,"width":441,"height":54},
		{"id":"e70a18bde89751bc","type":"file","file":"Pasted image 20240701110900.png","x":-2603,"y":1954,"width":796,"height":146},
		{"id":"5d5cae43b78d04a7","type":"text","text":"## SqlSessionFactory 줘","x":-7358,"y":3280,"width":438,"height":60},
		{"id":"2911664801b155d9","type":"file","file":"Pasted image 20240701112930.png","x":-7680,"y":3340,"width":1253,"height":50},
		{"id":"7906d7e10744d322","type":"text","text":"# 설정 파일에서","x":-7307,"y":2800,"width":336,"height":63},
		{"id":"afff88a536386b87","type":"file","file":"Pasted image 20240701112747.png","x":-7339,"y":2900,"width":400,"height":96},
		{"id":"fc30b992740297d1","type":"text","text":"### 마이바티스 설정도 같이 넣어서 공장 만들었어","x":-7358,"y":3390,"width":598,"height":74},
		{"id":"fd4d4f650e8a2714","type":"text","text":"# sql 세션 얻음","x":-7281,"y":3820,"width":322,"height":77},
		{"id":"87177a03698216a3","type":"file","file":"Pasted image 20240701113114.png","x":-7292,"y":3940,"width":400,"height":69},
		{"id":"a3a81de0449e0c1f","type":"text","text":"### 마이바티스가 설정된 상태로 sql 세션이 완성되는거야","x":-6892,"y":3851,"width":430,"height":92},
		{"id":"0586893e0ef84236","type":"text","text":"# 하이카리 씨피를 만들고","x":-5600,"y":3061,"width":398,"height":80},
		{"id":"645086e4cb53f260","type":"file","file":"Pasted image 20240701113719.png","x":-5600,"y":3151,"width":400,"height":129},
		{"id":"c6642da2f9beece1","type":"text","text":"## 만들어둔  데이터 소스를 가져가 ","x":-5600,"y":3411,"width":520,"height":90},
		{"id":"c8e6b81b77afc026","type":"file","file":"Pasted image 20240701113019.png","x":-5600,"y":3581,"width":400,"height":51},
		{"id":"156f0e08f9dffb16","type":"file","file":"Pasted image 20240701112957.png","x":-5600,"y":3532,"width":400,"height":99},
		{"id":"b65ab50798bc21ea","type":"text","text":"# 하이카리씨피 데이터소스 완성 ","x":-5600,"y":3741,"width":584,"height":100},
		{"id":"9fdb179cc1dfa43d","type":"text","text":"데이터 소스 주입","x":-6160,"y":3532,"width":189,"height":50},
		{"id":"4117e4a19405564d","type":"text","text":"# 나의 sql 세션 생성","x":-6348,"y":2736,"width":377,"height":64,"color":"1"},
		{"id":"8c0ac81ed7cb98f7","type":"file","file":"Pasted image 20240701114312.png","x":-8360,"y":3888,"width":400,"height":52},
		{"id":"dcc0826015202692","type":"text","text":"# mapper에 대한 sql 세션을 매소드마다 얻어내고 있음 ","x":-8543,"y":3760,"width":766,"height":81},
		{"id":"740ff4b871c4c719","type":"text","text":"#### 나는 sql 을 다 설정한 상태에서 마이바티스가 자동으로 인식하게 하고 있어 \n\nxml 설정파일은 여기 있고\nmapper은 여기 있고\n이런걸 다 설정해서 sql 세션을 이미 만들어 둔거.\n그래서 마이바티스가 그 세션을 부여 받고 있어서 따로 부가 설정이 필요 없었어. ","x":-9085,"y":3254,"width":840,"height":210},
		{"id":"a63c17648dcfa902","type":"file","file":"Pasted image 20240701114437.png","x":-9085,"y":3464,"width":725,"height":50},
		{"id":"8f1cb189d8910830","type":"text","text":"매퍼 인터페이스는 껍데기고 그걸 실행했을 때 마이바티스가 작동하게 하려면 ","x":-8512,"y":4160,"width":250,"height":60},
		{"id":"a81f9f2532df8afa","type":"text","text":"서로 연결하니까 매퍼가 동작하면 바로 xml로 연결되는거지","x":-8303,"y":4141,"width":250,"height":60},
		{"id":"77dfae7a5777d3c8","type":"text","text":"# 학원","x":-9702,"y":4355,"width":250,"height":60},
		{"id":"106b10babe83a1dd","type":"file","file":"Pasted image 20240701120349.png","x":-9777,"y":4480,"width":400,"height":83},
		{"id":"c8685320428458a5","type":"file","file":"Pasted image 20240701120715.png","x":-10517,"y":4563,"width":400,"height":70},
		{"id":"baca26550362967e","type":"file","file":"Pasted image 20240701120744.png","x":-10517,"y":4680,"width":400,"height":93},
		{"id":"93a10d21dd495a2b","type":"text","text":"# sqlSeesionTemplate을 사용하여 sql 세션을 생성해서 계속 재사용하게 만듬 ","x":-10720,"y":4459,"width":706,"height":104},
		{"id":"8c7e8201c67ac5f4","type":"text","text":"# 내가 설정한 공장에서 세션을 받아오는게 아니라/.","x":-3407,"y":2440,"width":727,"height":141},
		{"id":"db02b4e0931d7345","type":"file","file":"Pasted image 20240701121429.png","x":-11400,"y":5080,"width":400,"height":143},
		{"id":"e1e851446db3111d","type":"file","file":"Pasted image 20240701121529.png","x":-11400,"y":5240,"width":400,"height":101},
		{"id":"abbc25c5af53b973","x":-11620,"y":4680,"width":400,"height":277,"type":"file","file":"Pasted image 20240701121746.png"},
		{"id":"8a5f01e44cda6a21","x":-11220,"y":4705,"width":400,"height":228,"type":"file","file":"Pasted image 20240701121757.png"},
		{"id":"892211040f7cc418","x":-14055,"y":5040,"width":895,"height":175,"type":"text","text":"# `private SqlSession sqlSession;`을 사용하여 직접 `SqlSession`을 멤버 변수로 선언하고, `sqlSession.getMapper(BoardDAO.class)`를 통해 `BoardDAO` 인터페이스의 구현체를 얻어내는 방식과"},
		{"id":"d677a311daf6cfb9","x":-14055,"y":5560,"width":580,"height":120,"type":"text","text":"# Spring의 SqlSessionTemplate을 사용하는 방식 "},
		{"id":"886994157711483c","x":-16080,"y":7280,"width":1188,"height":468,"type":"text","text":"SqlSessionTemplate의 역할과 장점:\n세션 관리: SqlSessionTemplate은 내부적으로 SqlSessionFactory를 사용하여 필요할 때마다 MyBatis의 SqlSession을 생성하고 관리합니다. 이를 통해 매번 새로운 세션을 생성하거나, 세션을 닫고 반환하는 등의 작업을 개발자가 신경쓰지 않아도 됩니다.\n트랜잭션 관리: Spring의 트랜잭션 관리 기능과 연동하여 @Transactional 어노테이션을 사용하여 트랜잭션을 설정하고 롤백하는 등의 작업을 지원합니다.\n데이터베이스 연결 관리: 데이터베이스와의 연결 및 세션 관리에 대한 부담을 줄여줍니다. 특히 멀티스레드 환경에서 안전하게 세션을 사용할 수 있도록 도와줍니다.\nSqlSession의 사용 방식과 단점:\n직접적인 세션 관리: SqlSession을 직접 사용하는 경우에는 매번 매퍼 인터페이스에서 세션을 얻어내고 사용해야 합니다. 이는 세션의 생성과 소멸, 그리고 트랜잭션 처리 등을 직접 관리해야 하는 단점이 있습니다.\n트랜잭션 처리: Spring의 트랜잭션 관리와 연동하기 어렵고, 트랜잭션 처리에 있어 추가적인 코드 작성이 필요할 수 있습니다.\n리소스 관리: 세션의 생명주기를 정확히 이해하지 않으면 메모리 누수나 데이터베이스 리소스 낭비 등의 문제가 발생할 수 있습니다."},
		{"id":"a23304238eedfc3f","x":-14055,"y":6680,"width":1149,"height":85,"type":"text","text":"MyBatis에서 \"매퍼 인터페이스의 구현체를 얻어낸다\"는 것은 주로 매퍼 XML 파일에 정의된 SQL 쿼리를 실행할 수 있는 객체를 생성한다는 의미입니다."},
		{"id":"d9058d6c8af30677","x":-13825,"y":6200,"width":689,"height":245,"type":"text","text":"결론\n세션을 얻는다는 것은 MyBatis에서 데이터베이스와의 연결을 관리하고 SQL 쿼리를 실행하기 위해 필요한 과정입니다. sqlSession.getMapper() 메서드를 사용하여 매퍼 인터페이스의 구현체를 얻어내면, 이후 그 객체를 통해 실제로 데이터베이스와의 상호작용을 수행할 수 있습니다. 따라서 MyBatis를 사용하여 데이터베이스와 통신할 때는 세션을 얻는 것이 필수적인 과정입니다.\n\n\n\n"},
		{"id":"0d59caaca330c95f","x":-14055,"y":6020,"width":836,"height":65,"type":"text","text":"## MyBatis는 세션을 매퍼에서 얻어내어 SQL 쿼리를 실행합니다."},
		{"id":"d10302a183eea8ba","x":-13440,"y":7760,"width":680,"height":160,"type":"text","text":"BoardMapper 인터페이스를 @Autowired를 통해 주입받고 있습니다. 이는 Spring에서 관리하는 빈으로 등록되어 있는 BoardMapper의 구현체(Proxy 객체)가 필요할 때마다 자동으로 제공됩니다."},
		{"id":"a552d884008b6176","x":-13825,"y":7080,"width":865,"height":120,"type":"text","text":"Spring Boot에서는 spring-boot-starter-jdbc 또는 spring-boot-starter-data-jpa와 같은 스타터 의존성을 사용하여 기본적으로 HikariCP를 포함한 데이터베이스 연결 관련 라이브러리들이 함께 제공됩니다. 따라서 별도로 HikariCP에 대한 의존성을 직접 추가하지 않아도 됩니다. "},
		{"id":"7cc6771f40b31432","x":-12560,"y":6520,"width":600,"height":160,"type":"text","text":"spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase\nspring.datasource.username=root\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver"},
		{"id":"4101641a2232528d","x":-12160,"y":7000,"width":1083,"height":1010,"type":"text","text":"import org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.SqlSessionTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport javax.sql.DataSource;\n\n@Configuration\npublic class MyBatisConfig {\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n        factoryBean.setDataSource(dataSource);\n        factoryBean.setMapperLocations(applicationContext.getResources(\"classpath:/mapper/**/*Mapper.xml\"));\n        factoryBean.setTypeAliasesPackage(\"com.board.domain\");\n        factoryBean.setConfiguration(mybatisConfig());\n        return factoryBean.getObject();\n    }\n\n    @Bean\n    public SqlSessionTemplate sqlSession(SqlSessionFactory sqlSessionFactory) {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n\n    @Bean\n    public org.apache.ibatis.session.Configuration mybatisConfig() {\n        return new org.apache.ibatis.session.Configuration();\n    }\n\n}"},
		{"id":"064333877dffae09","x":1822,"y":3992,"width":892,"height":328,"type":"file","file":"Pasted image 20240701135116.png"},
		{"id":"0b72970ade57001d","x":-17420,"y":6080,"width":1428,"height":969,"type":"text","text":"\nChatGPT\nprivate SqlSession sqlSession;을 사용하여 직접 SqlSession을 멤버 변수로 선언하고, sqlSession.getMapper(BoardDAO.class)를 통해 BoardDAO 인터페이스의 구현체를 얻어내는 방식과 Spring의 SqlSessionTemplate을 사용하는 방식 간에는 몇 가지 중요한 차이점이 있습니다. 이들 차이점을 살펴보겠습니다.\n\n1. 직접 SqlSession 사용 방식\njava\n코드 복사\nprivate SqlSession sqlSession;\n장점:\n\n직접 SqlSession을 사용하는 경우, MyBatis가 제공하는 모든 기능을 직접 활용할 수 있습니다.\n세션의 생성과 소멸을 개발자가 직접 관리할 수 있어, 세션의 생명주기를 완벽하게 이해하고 제어할 수 있습니다.\n단점:\n\n세션 관리 및 생명주기 관리가 필요하며, 이를 실수로 인해 메모리 누수나 데이터베이스 리소스 낭비 등의 문제가 발생할 수 있습니다.\nSpring의 트랜잭션 관리 기능을 이용하기 어렵습니다. 예를 들어, @Transactional 어노테이션을 사용하여 트랜잭션을 설정하거나 관리할 수 없습니다.\n특정 상황에서 세션을 공유하거나 재사용할 수 있는 방법이 제한적일 수 있습니다.\n2. SqlSessionTemplate 사용 방식\njava\n코드 복사\nprivate SqlSessionTemplate sqlSessionTemplate;\n장점:\n\nSpring의 IoC 컨테이너가 관리하는 SqlSessionTemplate을 사용하여 MyBatis 세션을 통합 관리할 수 있습니다.\nSpring의 트랜잭션 관리와 연동되어 @Transactional 어노테이션을 통해 트랜잭션을 설정하고 관리할 수 있습니다.\n데이터베이스 연결과 세션 관리에 대한 부담을 덜 수 있습니다.\n단점:\n\nMyBatis가 제공하는 일부 고급 기능을 사용하기 어려울 수 있습니다. 예를 들어, 직접 세션을 제어하여 세션 풀링을 세밀하게 조정하는 경우 등이 있습니다.\nSpring의 추상화 레이어를 통해 세부적인 MyBatis 설정을 변경하기 어려울 수 있습니다.\n결론\n직접 SqlSession을 사용하면 MyBatis의 모든 기능을 직접 활용할 수 있지만, 세션 관리와 트랜잭션 관리 등을 직접 해주어야 하며 Spring의 장점을 충분히 활용하기 어렵습니다. 반면에 SqlSessionTemplate을 사용하면 Spring의 트랜잭션 관리와 더 높은 추상화 수준을 제공받을 수 있지만, MyBatis의 일부 고급 기능을 사용하는 데 제약이 있을 수 있습니다. 선택은 프로젝트의 요구사항과 개발자의 선호에 따라 달라질 수 있습니다."},
		{"id":"b15883269ba09765","x":-17620,"y":7280,"width":400,"height":94,"type":"file","file":"Pasted image 20240701135537.png"}
	],
	"edges":[
		{"id":"d234dbd9f2da445e","fromNode":"25bba6b1d5344bb1","fromSide":"right","toNode":"d6330e68ddcf5bc8","toSide":"left"},
		{"id":"7d61fdd5a2930bc9","fromNode":"d6330e68ddcf5bc8","fromSide":"right","toNode":"c107cff926db5ee5","toSide":"left"},
		{"id":"3e92eab2c856b8be","fromNode":"b414fe8f20e1a0e4","fromSide":"right","toNode":"560d552766c0de80","toSide":"left"},
		{"id":"1eb8bb73ceb9f687","fromNode":"c107cff926db5ee5","fromSide":"right","toNode":"4e901332524f9d15","toSide":"left"},
		{"id":"b2cc31c692723fc0","fromNode":"57efcd4375083210","fromSide":"right","toNode":"4e901332524f9d15","toSide":"left"},
		{"id":"dab95f5e6c4fa0a6","fromNode":"afff88a536386b87","fromSide":"bottom","toNode":"5d5cae43b78d04a7","toSide":"bottom"},
		{"id":"ab75b8865c2d5aaa","fromNode":"fc30b992740297d1","fromSide":"bottom","toNode":"fd4d4f650e8a2714","toSide":"top"},
		{"id":"0f55a040b82e38b8","fromNode":"b65ab50798bc21ea","fromSide":"left","toNode":"2911664801b155d9","toSide":"right"},
		{"id":"7b1d08f46c8c6eb0","fromNode":"d9058d6c8af30677","fromSide":"bottom","toNode":"a23304238eedfc3f","toSide":"top"},
		{"id":"3b0a8944d9d7f232","fromNode":"a552d884008b6176","fromSide":"right","toNode":"7cc6771f40b31432","toSide":"left"},
		{"id":"141c27ed1ed422c3","fromNode":"7cc6771f40b31432","fromSide":"right","toNode":"4101641a2232528d","toSide":"top"}
	]
}