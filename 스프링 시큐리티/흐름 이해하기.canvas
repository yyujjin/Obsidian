{
	"nodes":[
		{"id":"dddf1b0a99a0b227","type":"text","text":"```html\n<html>  \n<head>  \n    <meta charset=\"UTF-8\">  \n    <meta name=\"viewport\"  \n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">  \n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">  \n    <title>Document</title>  \n</head>  \n<body>  \n    <form action=\"/joinProc\" method=\"post\" name=\"joinForm\">  \n        <input type=\"text\" name=\"username\" placeholder=\"Username\"/>  \n        <input type=\"password\" name=\"password\" placeholder=\"Password\"/>  \n        <input type=\"submit\" value=\"Join\"/>  \n    </form>  \n</body>  \n</html>\n```","x":-341,"y":746,"width":1121,"height":414},
		{"id":"4d7a20c3bc5d7c62","type":"text","text":"# 회원 가입 폼\n- join.mustache","x":-341,"y":645,"width":285,"height":101},
		{"id":"c30f6687d4ff47ae","type":"text","text":"- /joinProc 경로 실행 됨\n- 해당 경로는 로그인 안한 사람도 접근할 수 있게 config 설정 해줘야 함. ","x":960,"y":894,"width":443,"height":119},
		{"id":"800f8e04edf46b87","type":"text","text":"# joinController","x":1640,"y":734,"width":280,"height":60},
		{"id":"0f732928d8ec6e11","type":"text","text":"```java\n\n    @PostMapping(\"/joinProc\")  \n    public String joinProcess(JoinDTO joinDTO) {  \n  \n        log.info(\"넘어온 dto : {}\",joinDTO);  \n  \n        joinService.joinProcess(joinDTO);  \n        \n\t\t//이상 없으면 바로 로그인 페이지로 리다이렉트\n        return \"redirect:/login\";  \n    }  \n}\n```","x":1640,"y":794,"width":954,"height":320},
		{"id":"3a9819de19e1c3c7","type":"text","text":"joinProcess 메서드 실행  ","x":2860,"y":924,"width":250,"height":60},
		{"id":"b0f2fd5efe9da395","type":"text","text":"# JoinService\n- 아이디 중복 확인 후 없다면 해당 로직 실행\n- 아이디, 비밀번호,role db에 저장하는 로직","x":3480,"y":580,"width":560,"height":131},
		{"id":"d798e2c60fc95050","type":"text","text":"```java\n  \n    public void joinProcess(JoinDTO joinDTO) {  \n  \n    boolean isUser = userRepository.existsByUsername(joinDTO.getUsername());  \n    if (isUser) {  \n        return;  \n    }  \n    \n    UserEntity data = new UserEntity();  \n\n    //넘어온 joinDTO를 가지고 db에 넣는 거임\n    data.setUsername(joinDTO.getUsername());  \n    //비밀번호는 해쉬코드 사용해서 넣기 \n    data.setPassword(bCryptPasswordEncoder.encode(joinDTO.getPassword()));  \n    //해당 role을 부여함 \n    data.setRole(\"ROLE_ADMIN\");  \n    //Spring Data JPA에서 엔티티를 데이터베이스에 저장하거나 업데이트하는 역할\n    userRepository.save(data);  \n  \n}\n```","x":3480,"y":711,"width":1119,"height":487},
		{"id":"84f080da7da164ec","type":"text","text":"```java\n//유저네임이 있다 ->t 없다 ->f\nboolean existsByUsername(String username);\n```","x":4760,"y":915,"width":548,"height":80},
		{"id":"28433ef0cf46bbe1","type":"text","text":"- 마이바티스처럼 mapper 라고 생각하면 됨. \n- 데이터 넘겨서 동일한 유저아이디가 있다면 true 반환 ","x":4760,"y":835,"width":532,"height":80},
		{"id":"67ecf2fe54e198df","type":"text","text":"1. **로그인 시도**:\n    \n    - 사용자가 로그인 폼에서 사용자 이름과 비밀번호를 입력하고 로그인 버튼을 클릭합니다.","x":7008,"y":40,"width":810,"height":80},
		{"id":"f698a57688aff3cc","type":"text","text":"# 스프링 시큐리티 인증 과정","x":7207,"y":-180,"width":413,"height":60},
		{"id":"0c0d83a020611c5d","type":"text","text":"2. **`UsernamePasswordAuthenticationFilter`**:\n    \n    - 스프링 시큐리티는 `UsernamePasswordAuthenticationFilter`를 사용하여 로그인 요청을 처리합니다. 이 필터는 사용자가 입력한 사용자 이름과 비밀번호를 추출합니다.\n    - 로그인 요청을 처리하기 위해 `UsernamePasswordAuthenticationFilter`는 `UsernamePasswordAuthenticationToken` 객체를 생성합니다. 이 객체는 사용자 이름과 비밀번호를 포함합니다.","x":6602,"y":340,"width":1622,"height":126},
		{"id":"9332779fc393af89","type":"text","text":"3. **`AuthenticationManager`**:\n    \n    - `AuthenticationManager`는 `UsernamePasswordAuthenticationToken` 객체를 받아 처리합니다. 이 객체는 `UserDetailsService`를 통해 사용자 정보를 로드하는 데 사용됩니다.","x":6644,"y":700,"width":1539,"height":100},
		{"id":"cbef23884c29a6c0","type":"text","text":"`UsernamePasswordAuthenticationToken` 객체를 생성하는 단계에서는 아직 사용자의 인증이 완료되지 않은 상태입니다. 이 객체는 로그인 요청에서 입력된 사용자 이름과 비밀번호를 담고 있지만, ==인증이 완료되었거나 유효성을 검증받지 않은 상태입니다.==","x":8580,"y":360,"width":1000,"height":87},
		{"id":"b115b2c3d47b36ab","type":"text","text":"4. **`UserDetailsService`의 `loadUserByUsername` 호출**:\n    \n    - `AuthenticationManager`는 `UserDetailsService`의 `loadUserByUsername` 메서드를(오버라이드 된) 호출하여 데이터베이스에서 사용자 정보를 조회합니다.\n    - `loadUserByUsername` 메서드는 사용자 이름을 기반으로 사용자 정보를 로드하고, `UserDetails` 객체를 반환합니다.","x":6652,"y":1000,"width":1523,"height":120},
		{"id":"0cabd7a9614cbb08","type":"text","text":"- `loadUserByUsername` 메서드를 오버라이드해서 작성하고 그 안에 db에 있는 사용자 정보를 스프링 시큐리티가 비교할 수 있게 로직을 짜줘야 함  \n- `UserEntity userData =  userRepository.findByUsername(username);`  => 나는 마이바티스 로직 짜서 데이터 넣어서 회원 유저인지 확인할 수 있게","x":8500,"y":1000,"width":1380,"height":115},
		{"id":"75a50aff0e98cafa","type":"text","text":"5. **`UserDetails` 객체 반환**:\n    \n    - `UserDetailsService`에서 반환된 `UserDetails` 객체는 사용자 이름, 비밀번호, 권한 등의 정보를 담고 있습니다.\n    - 이 정보를 기반으로 `UsernamePasswordAuthenticationToken` 객체가 인증된 `Authentication` 객체로 변환됩니다.","x":6833,"y":1320,"width":1161,"height":127},
		{"id":"1c4a55af053e4d01","type":"text","text":"6. **인증 성공 또는 실패**:\n    \n    - 인증이 성공하면, `Authentication` 객체는 `SecurityContext`에 저장되며, 사용자는 로그인된 상태로 처리됩니다.\n    - 인증이 실패하면, 스프링 시큐리티는 로그인 실패를 처리하고 ==적절한 에러 메시지를 표시합니다.==","x":6866,"y":1660,"width":1096,"height":138},
		{"id":"9f737d237539c1b1","type":"text","text":"**`Authentication` 객체**: 이 객체는 인증된 사용자의 정보를 나타내며, `UserDetails` 객체를 포함하고 있습니다. 보통 `UsernamePasswordAuthenticationToken` 같은 클래스가 사용됩니다. `Authentication` 객체는 사용자의 인증 상태와 권한 정보 등을 담고 있습니다.","x":8295,"y":1330,"width":1238,"height":107},
		{"id":"1d2a7b0ae53e5f14","type":"text","text":"# 스프링 시큐리티 모식도","x":1720,"y":-2400,"width":400,"height":66},
		{"id":"d6408e2252c4eed7","type":"file","file":"image/Pasted image 20240802144552.png","x":1720,"y":-2334,"width":400,"height":216},
		{"id":"b1fdc5f309e0be59","type":"text","text":"# 로그인 폼\n- login.mustache","x":4175,"y":-1440,"width":341,"height":94},
		{"id":"4676d1820795c6f9","type":"text","text":"```html\n<html>  \n<head>  \n    <meta charset=\"UTF-8\">  \n    <meta name=\"viewport\"  \n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">  \n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">  \n    <title>Document</title>  \n</head>  \n<body>  \nlogin page  \n<hr>  \n<form action=\"/loginProc\" method=\"post\" name=\"loginForm\">  \n    <input id=\"username\" type=\"text\" name=\"username\" placeholder=\"id\"/>  \n    <input id=\"password\" type=\"password\" name=\"password\" placeholder=\"password\"/>  \n    <input type=\"submit\" value=\"login\"/>  \n</form>  \n</body>  \n</html>\n```","x":4175,"y":-1346,"width":1171,"height":446},
		{"id":"ee4a022d8046e85b","type":"text","text":"- 유저가 로그인폼을 작성하면 /loginProc 경로가 실행됨\n-  /loginProc 접근 권한에 대해서는 로그인 안한 사용자도 config로 접근 허용해주어야 함. ","x":5698,"y":-1170,"width":759,"height":95},
		{"id":"56b9ee8f25ff4b3d","type":"text","text":"기본적으로, 스프링 시큐리티는 인증 실패 시 `UsernamePasswordAuthenticationFilter`를 통해 `AuthenticationException`을 발생시킵니다. 이 예외는 ==일반적으로 로그인 페이지로 리다이렉트되며,== 파라미터에 실패 이유를 포함할 수 있습니다.","x":8160,"y":2435,"width":1179,"height":85},
		{"id":"bd3700425d72e3e1","type":"text","text":"**커스텀 핸들러**:\n\n- 인증 실패 시 사용자에게 제공할 에러 메시지를 커스터마이즈하려면 `AuthenticationFailureHandler`를 구현하여 사용자 정의 핸들러를 생성할 수 있습니다.\n- 예를 들어, 실패 원인에 따라 구체적인 에러 메시지를 설정하고 이를 로그인 페이지에 표시할 수 있습니다.","x":9725,"y":2400,"width":1313,"height":156},
		{"id":"0de46f0688055fd8","type":"text","text":"`SecurityContext`는 현재의 보안 컨텍스트를 유지하는 객체로, 보통 `SecurityContextHolder`를 통해 접근합니다. 이 컨텍스트는 현재 인증된 사용자에 대한 `Authentication` 객체를 보관하고 있습니다.","x":8175,"y":1786,"width":933,"height":93},
		{"id":"5151d0559cbe0590","type":"text","text":"### 서버 세션\n\n- **서버 세션 관리**: 사용자가 로그인하면 스프링 시큐리티는 사용자의 인증 정보를 `SecurityContext` 객체에 저장합니다. \n\t- `SecurityContext`는 ==서버의 세션에 저장됩니다.==\n\t- 서버 세션은 사용자가 로그인한 상태를 유지하고, ==세션 ID는 쿠키를 통해 사용자에게 반환==됩니다.\n    \n    - **세션 ID 쿠키**: 세션 ID는 ==브라우저의 쿠키에 저장되어 서버에 요청을 보낼 때마다 자동으로 포함==됩니다. 이 세션 ID를 통해 서버는 클라이언트의 세션을 식별하고, 사용자 인증 정보를 조회할 수 있습니다.","x":9720,"y":1720,"width":1220,"height":233}
	],
	"edges":[
		{"id":"db563ec7ecd5527c","fromNode":"dddf1b0a99a0b227","fromSide":"right","toNode":"0f732928d8ec6e11","toSide":"left"},
		{"id":"5c3e26994b8f6620","fromNode":"0f732928d8ec6e11","fromSide":"right","toNode":"d798e2c60fc95050","toSide":"left"},
		{"id":"68e57d32bcb6da8b","fromNode":"d798e2c60fc95050","fromSide":"right","toNode":"84f080da7da164ec","toSide":"left"},
		{"id":"c37a1af6a4a0fb85","fromNode":"4676d1820795c6f9","fromSide":"right","toNode":"ee4a022d8046e85b","toSide":"left"},
		{"id":"4e890bc9b0716033","fromNode":"f698a57688aff3cc","fromSide":"bottom","toNode":"67ecf2fe54e198df","toSide":"top"},
		{"id":"86d0f08fb4743637","fromNode":"67ecf2fe54e198df","fromSide":"bottom","toNode":"0c0d83a020611c5d","toSide":"top"},
		{"id":"5fb22bbd48096cfd","fromNode":"0c0d83a020611c5d","fromSide":"bottom","toNode":"9332779fc393af89","toSide":"top"},
		{"id":"5196fedfa313d83e","fromNode":"0c0d83a020611c5d","fromSide":"right","toNode":"cbef23884c29a6c0","toSide":"left"},
		{"id":"bcccdc549f4797a8","fromNode":"9332779fc393af89","fromSide":"bottom","toNode":"b115b2c3d47b36ab","toSide":"top"},
		{"id":"22f3411d18091907","fromNode":"b115b2c3d47b36ab","fromSide":"right","toNode":"0cabd7a9614cbb08","toSide":"left"},
		{"id":"e2642efaa785ec2f","fromNode":"b115b2c3d47b36ab","fromSide":"bottom","toNode":"75a50aff0e98cafa","toSide":"top"},
		{"id":"d3f2f50a4b8184a5","fromNode":"cbef23884c29a6c0","fromSide":"bottom","toNode":"75a50aff0e98cafa","toSide":"right"},
		{"id":"c9478abac6a49bb4","fromNode":"75a50aff0e98cafa","fromSide":"bottom","toNode":"1c4a55af053e4d01","toSide":"top"},
		{"id":"aeb901c28bf37bce","fromNode":"75a50aff0e98cafa","fromSide":"right","toNode":"9f737d237539c1b1","toSide":"left"},
		{"id":"8829474c22df5e3c","fromNode":"1c4a55af053e4d01","fromSide":"right","toNode":"0de46f0688055fd8","toSide":"left"},
		{"id":"09cad8725cd7b975","fromNode":"1c4a55af053e4d01","fromSide":"right","toNode":"56b9ee8f25ff4b3d","toSide":"left"},
		{"id":"ffeb814d6c7ddf88","fromNode":"56b9ee8f25ff4b3d","fromSide":"right","toNode":"bd3700425d72e3e1","toSide":"left"},
		{"id":"4357f904c358a969","fromNode":"ee4a022d8046e85b","fromSide":"right","toNode":"f698a57688aff3cc","toSide":"top"},
		{"id":"074589a47cd97d0a","fromNode":"0de46f0688055fd8","fromSide":"right","toNode":"5151d0559cbe0590","toSide":"left"}
	]
}