{
	"nodes":[
		{"id":"dddf1b0a99a0b227","type":"text","text":"```html\n<html>  \n<head>  \n    <meta charset=\"UTF-8\">  \n    <meta name=\"viewport\"  \n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">  \n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">  \n    <title>Document</title>  \n</head>  \n<body>  \n    <form action=\"/joinProc\" method=\"post\" name=\"joinForm\">  \n        <input type=\"text\" name=\"username\" placeholder=\"Username\"/>  \n        <input type=\"password\" name=\"password\" placeholder=\"Password\"/>  \n        <input type=\"submit\" value=\"Join\"/>  \n    </form>  \n</body>  \n</html>\n```","x":-341,"y":746,"width":1121,"height":414},
		{"id":"4d7a20c3bc5d7c62","type":"text","text":"# 회원 가입 폼\n- join.mustache","x":-341,"y":645,"width":285,"height":101},
		{"id":"1d2a7b0ae53e5f14","type":"text","text":"# 스프링 시큐리티 모식도","x":1640,"y":-1160,"width":400,"height":66},
		{"id":"d6408e2252c4eed7","type":"file","file":"image/Pasted image 20240802144552.png","x":1640,"y":-1094,"width":400,"height":216},
		{"id":"c30f6687d4ff47ae","type":"text","text":"- /joinProc 경로 실행 됨\n- 해당 경로는 로그인 안한 사람도 접근할 수 있게 config 설정 해줘야 함. ","x":960,"y":894,"width":443,"height":119},
		{"id":"800f8e04edf46b87","type":"text","text":"# joinController","x":1640,"y":734,"width":280,"height":60},
		{"id":"0f732928d8ec6e11","type":"text","text":"```java\n\n    @PostMapping(\"/joinProc\")  \n    public String joinProcess(JoinDTO joinDTO) {  \n  \n        log.info(\"넘어온 dto : {}\",joinDTO);  \n  \n        joinService.joinProcess(joinDTO);  \n        \n\t\t//이상 없으면 바로 로그인 페이지로 리다이렉트\n        return \"redirect:/login\";  \n    }  \n}\n```","x":1640,"y":794,"width":954,"height":320},
		{"id":"3a9819de19e1c3c7","type":"text","text":"joinProcess 메서드 실행  ","x":2860,"y":924,"width":250,"height":60},
		{"id":"b0f2fd5efe9da395","type":"text","text":"# JoinService\n- 아이디 중복 확인 후 없다면 해당 로직 실행\n- 아이디, 비밀번호,role db에 저장하는 로직","x":3480,"y":580,"width":560,"height":131},
		{"id":"d798e2c60fc95050","type":"text","text":"```java\n  \n    public void joinProcess(JoinDTO joinDTO) {  \n  \n    boolean isUser = userRepository.existsByUsername(joinDTO.getUsername());  \n    if (isUser) {  \n        return;  \n    }  \n    \n    UserEntity data = new UserEntity();  \n\n    //넘어온 joinDTO를 가지고 db에 넣는 거임\n    data.setUsername(joinDTO.getUsername());  \n    //비밀번호는 해쉬코드 사용해서 넣기 \n    data.setPassword(bCryptPasswordEncoder.encode(joinDTO.getPassword()));  \n    //해당 role을 부여함 \n    data.setRole(\"ROLE_ADMIN\");  \n    //Spring Data JPA에서 엔티티를 데이터베이스에 저장하거나 업데이트하는 역할\n    userRepository.save(data);  \n  \n}\n```","x":3480,"y":711,"width":1119,"height":487},
		{"id":"84f080da7da164ec","type":"text","text":"```java\n//유저네임이 있다 ->t 없다 ->f\nboolean existsByUsername(String username);\n```","x":4760,"y":915,"width":548,"height":80},
		{"id":"28433ef0cf46bbe1","type":"text","text":"- 마이바티스처럼 mapper 라고 생각하면 됨. \n- 데이터 넘겨서 동일한 유저아이디가 있다면 true 반환 ","x":4760,"y":835,"width":532,"height":80},
		{"id":"4676d1820795c6f9","type":"text","text":"```html\n<html>  \n<head>  \n    <meta charset=\"UTF-8\">  \n    <meta name=\"viewport\"  \n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">  \n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">  \n    <title>Document</title>  \n</head>  \n<body>  \nlogin page  \n<hr>  \n<form action=\"/loginProc\" method=\"post\" name=\"loginForm\">  \n    <input id=\"username\" type=\"text\" name=\"username\" placeholder=\"id\"/>  \n    <input id=\"password\" type=\"password\" name=\"password\" placeholder=\"password\"/>  \n    <input type=\"submit\" value=\"login\"/>  \n</form>  \n</body>  \n</html>\n```","x":-341,"y":-186,"width":1171,"height":446},
		{"id":"b1fdc5f309e0be59","type":"text","text":"# 로그인 폼\n- login.mustache","x":-341,"y":-280,"width":341,"height":94},
		{"id":"ee4a022d8046e85b","type":"text","text":"- 유저가 로그인폼을 작성하면 /loginProc 경로가 실행됨\n-  /loginProc 접근 권한에 대해서는 로그인 안한 사용자도 config로 접근 허용해주어야 함. ","x":1182,"y":-10,"width":759,"height":95},
		{"id":"569af123445372a5","type":"text","text":"# ?","x":2360,"y":8,"width":250,"height":60},
		{"id":"ff49e8df5bb60287","type":"text","text":"- 지금 이 사용자가 db에 저장된 사용자인지 확인하는 로직이 어디있지?\n- 근데 어떻게 로그인이 되지?\n- 이걸 스프링 시큐리티가 자동으로 해주는건가?\n- 그렇다면 대단한데?","x":2360,"y":-162,"width":627,"height":170},
		{"id":"85b4e02501a8f9d0","type":"text","text":"```java\npackage com.testSecurity.testSecurity.service;  \n  \nimport com.testSecurity.testSecurity.dto.CustomUserDetails;  \nimport com.testSecurity.testSecurity.entity.UserEntity;  \nimport com.testSecurity.testSecurity.repository.UserRepository;  \nimport org.springframework.beans.factory.annotation.Autowired;  \nimport org.springframework.security.core.userdetails.UserDetails;  \nimport org.springframework.security.core.userdetails.UserDetailsService;  \nimport org.springframework.security.core.userdetails.UsernameNotFoundException;  \nimport org.springframework.stereotype.Service;  \n  \n@Service  \npublic class CustomUserDetailsService implements UserDetailsService {  \n  \n    // 스프링이 제공하는 서비스 UserDetailsService    //상속받아서 오버라이드 해주면 됨  \n    private final UserRepository userRepository;  \n  \n    public CustomUserDetailsService(UserRepository userRepository) {  \n        this.userRepository = userRepository;  \n    }  \n  \n    //해당 메서드가 호출될 때 username 인자를 받는다. (앞단에서 사용자가 로그인을 하면 스프링 시큐리티가 검증을 위해 username을 넣어줌)  \n    //username을 가지고 db에서 조회하면 됨  \n    @Override  \n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {  \n        UserEntity userData =  userRepository.findByUsername(username);  \n  \n        //null일 경우 저장된 아이디가 없다.  \n        //username = > 아이디  \n        if(userData != null) {  \n            return new CustomUserDetails(userData);  \n        }  \n        return null;  \n    }  \n}\n```","x":2888,"y":-1720,"width":1252,"height":820},
		{"id":"c65780b8979d91c0","x":2888,"y":-1860,"width":972,"height":140,"type":"text","text":"# CustomUserDetailsService\n\n- 로그인 후 해당 아이디가 있으면 실행됨\n- 유저 네임으로 db에서 찾아서 UserDetails 인터페이스를 임플란트 해서 만든 dto 형식으로 유저 정보를 저장한다. \n\n"},
		{"id":"fe0478814c80160d","x":4406,"y":-1500,"width":1434,"height":500,"type":"text","text":"### UserDetailsService를 이용해서 클래스를 만들어 주면\n\n- `UserDetailsService`를 사용하여 `UsernamePasswordAuthenticationToken` 객체를 생성\n- 이 객체는 사용자의 인증 정보를 담고 있으며, 인증 과정에서 `loadUserByUsername` 메서드가 호출되어 `UserDetails` 객체를 반환합니다.\n\n\n\n- 사용자가 로그인 폼에서 사용자 이름(혹은 사용자 ID)과 비밀번호를 입력하고 로그인 버튼을 클릭할 때, 스프링 시큐리티는 `UserDetailsService` 안에 있는 메서드를 자동으로 호출\n- 스프링 시큐리티는 이 메서드를 호출하여 데이터베이스에서 사용자의 정보(주로 사용자 이름, 비밀번호, 권한 등)를 조회합니다. (이건 내가 로직 짜야함)"},
		{"id":"c2f13e664ed3c1a0","x":4574,"y":-1800,"width":446,"height":274,"type":"text","text":"`UserDetailsService`를 사용하여 클래스를 만들어 주었기에 스프링 시큐리티가 `UsernamePasswordAuthenticationToken` 객체를 생성하고 이 객체가 `UserDetailsService` 클래스 안에 있는 `loadUserByUsername` 메서드를 호출하는거야"},
		{"id":"abd76a6e7e89d769","x":6979,"y":-1495,"width":1741,"height":835,"type":"text","text":"### 스프링 시큐리티 인증 과정\n\n1. **로그인 시도**:\n    \n    - 사용자가 로그인 폼에서 사용자 이름과 비밀번호를 입력하고 로그인 버튼을 클릭합니다.\n2. **`UsernamePasswordAuthenticationFilter`**:\n    \n    - 스프링 시큐리티는 `UsernamePasswordAuthenticationFilter`를 사용하여 로그인 요청을 처리합니다. 이 필터는 사용자가 입력한 사용자 이름과 비밀번호를 추출합니다.\n    - 로그인 요청을 처리하기 위해 `UsernamePasswordAuthenticationFilter`는 `UsernamePasswordAuthenticationToken` 객체를 생성합니다. 이 객체는 사용자 이름과 비밀번호를 포함합니다.\n3. **`AuthenticationManager`**:\n    \n    - `AuthenticationManager`는 `UsernamePasswordAuthenticationToken` 객체를 받아 처리합니다. 이 객체는 `UserDetailsService`를 통해 사용자 정보를 로드하는 데 사용됩니다.\n4. **`UserDetailsService`의 `loadUserByUsername` 호출**:\n    \n    - `AuthenticationManager`는 `UserDetailsService`의 `loadUserByUsername` 메서드를 호출하여 데이터베이스에서 사용자 정보를 조회합니다.\n    - `loadUserByUsername` 메서드는 사용자 이름을 기반으로 사용자 정보를 로드하고, `UserDetails` 객체를 반환합니다.\n5. **`UserDetails` 객체 반환**:\n    \n    - `UserDetailsService`에서 반환된 `UserDetails` 객체는 사용자 이름, 비밀번호, 권한 등의 정보를 담고 있습니다.\n    - 이 정보를 기반으로 `UsernamePasswordAuthenticationToken` 객체가 인증된 `Authentication` 객체로 변환됩니다.\n6. **인증 성공 또는 실패**:\n    \n    - 인증이 성공하면, `Authentication` 객체는 `SecurityContext`에 저장되며, 사용자는 로그인된 상태로 처리됩니다.\n    - 인증이 실패하면, 스프링 시큐리티는 로그인 실패를 처리하고 적절한 에러 메시지를 표시합니다.\n\n### 전체적인 흐름\n\n- **클래스 및 메서드 역할**:\n    - `UserDetailsService`: 사용자 이름으로 `UserDetails`를 로드합니다. 이 서비스는 사용자 인증을 처리하는 핵심 역할을 합니다.\n    - `UsernamePasswordAuthenticationToken`: 사용자의 인증 정보를 담고 있는 객체로, 스프링 시큐리티의 인증 과정에서 사용됩니다.\n    - `AuthenticationManager`: `UserDetailsService`를 통해 사용자 정보를 로드하고, `UsernamePasswordAuthenticationToken`을 인증합니다."},
		{"id":"67ecf2fe54e198df","x":7008,"y":40,"width":810,"height":80,"type":"text","text":"1. **로그인 시도**:\n    \n    - 사용자가 로그인 폼에서 사용자 이름과 비밀번호를 입력하고 로그인 버튼을 클릭합니다."},
		{"id":"f698a57688aff3cc","x":7207,"y":-180,"width":413,"height":60,"type":"text","text":"# 스프링 시큐리티 인증 과정"}
	],
	"edges":[
		{"id":"db563ec7ecd5527c","fromNode":"dddf1b0a99a0b227","fromSide":"right","toNode":"0f732928d8ec6e11","toSide":"left"},
		{"id":"5c3e26994b8f6620","fromNode":"0f732928d8ec6e11","fromSide":"right","toNode":"d798e2c60fc95050","toSide":"left"},
		{"id":"68e57d32bcb6da8b","fromNode":"d798e2c60fc95050","fromSide":"right","toNode":"84f080da7da164ec","toSide":"left"},
		{"id":"c37a1af6a4a0fb85","fromNode":"4676d1820795c6f9","fromSide":"right","toNode":"ee4a022d8046e85b","toSide":"left"},
		{"id":"c56ab18ff1eb34e7","fromNode":"ee4a022d8046e85b","fromSide":"right","toNode":"569af123445372a5","toSide":"left"},
		{"id":"4e890bc9b0716033","fromNode":"f698a57688aff3cc","fromSide":"bottom","toNode":"67ecf2fe54e198df","toSide":"top"}
	]
}